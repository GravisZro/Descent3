#include <cstdio>
#include <utility>
#include <type_traits>
#include <array>

#include "vecmat_external.h"
#include "AIGoal.h"
#include "AIMain.h"
#include "aiambient.h"
#include "aipath.h"
#include "aistruct.h"
#include "aiterrain.h"
#include "ambient.h"
#include "bnode.h"
#include "bsp.h"
#include "doorway.h"
#include "gamesave.h"
#include "weather.h"
#include "viseffect_external.h"
#include "spew.h"
#include "multi.h"
#include "terrain.h"
#include "Mission.h"
#include "render.h"
#include "hud.h"
#include "hotspotmap.h"
#include "vclip.h"
#include "weapon.h"
#include "trigger.h"
#include "player.h"
#include "matcen.h"
#include "special_face.h"
#include "pilot.h"
#include "postrender.h"
#include "powerup.h"
#include "procedurals.h"
#include "lightmap_info.h"
#include "lighting.h"
#include "gamepath.h"
#include "gameevent.h"
#include "gamecinematics_external.h"
#include "fireball.h"

#ifndef __cpp_lib_type_identity
namespace std
{
  template<class T>
  struct type_identity { using type = T; };

  template< class T >
  using type_identity_t = typename type_identity<T>::type;
}
#endif


struct old_vis_attach_info {
  int obj_handle, dest_objhandle;
  uint8_t subnum, subnum2;

  uint16_t modelnum;
  uint16_t vertnum, end_vertnum;
};

struct old_vis_effect {
  uint8_t type;
  uint8_t id;

  vector pos;

  vector velocity;
  float mass;
  float drag;
  float size;
  float lifeleft;
  float lifetime;
  float creation_time;

  int roomnum;
  uint16_t flags;
  int phys_flags;
  uint8_t movement_type;
  int16_t custom_handle;
  uint16_t lighting_color;

  vis_attach_info attach_info;
  axis_billboard_info billboard_info;

  vector end_pos;

  int16_t next;
  int16_t prev;
};



template<typename T>
constexpr const char* is_byteswapped(void)
{
  if constexpr (sizeof(T) != 1 &&
                (std::is_floating_point_v<T> || std::is_integral_v<T>))
    return "true";
  else
    return "false";
}


constexpr const char* platform_name(void)
{
#if defined(__x86_64__)
  return "x86_64";
#elif defined(__i386__)
  return "i386";
#elif defined(__powerpc__)
  return "powerpc";
#endif
}

template<typename> struct is_not;
template<> struct is_not<std::false_type> : public std::true_type  { };
template<> struct is_not<std::true_type > : public std::false_type { };


template<typename> struct is_not_array : public std::true_type { };
template<typename T, std::size_t sz> struct is_not_array<T[sz]> : public std::false_type { };
template<typename T> struct is_not_array<T[]> : public std::false_type { };



template<typename T> struct array_element { T type; };
template<typename T, std::size_t N> struct array_element<T[N]> { T type; };
template<typename T> struct array_element<T[]> { T type; };



template <class T, class M>
M get_member_type(M T::*);
template <class T, class M, std::size_t N>
std::array<M, N> get_member_type(M (T::*)[N]);

//template <class T, class M, std::size_t N> M[N] get_member_type(M[N] T::*);
#define GTO(base, member) decltype(get_member_type(&base::member))


template<typename T, std::size_t N>
//inline typename std::enable_if_t<std::is_array_v<T>, void>
void details(std::type_identity<std::array<T, N>>, const char* name, size_t offset)
{
  printf(R"("%s" : { "byteswap" : %s, "size" : %lu, "offset" : %lu, "count" : %lu })",
         name,
         is_byteswapped<T>(),
         sizeof(T),
         offset,
         N);
}

template<typename T>
//inline typename std::enable_if_t<!std::is_array_v<T>, void>
void details(std::type_identity<T>, const char* name, size_t offset)
{
  printf(R"("%s" : { "byteswap" : %s, "size" : %lu, "offset" : %lu })",
         name,
         is_byteswapped<T>(),
         sizeof(T),
         offset);
}


extern "C" void dump_struct_sizes(void)
{
  printf("{\n\"platform\" : \"%s\",\n", platform_name());
  printf("\"structs\" : [\n");

  printf(R"("%s" : { "size" : %lu, "members" : [)", "vector", sizeof(vector));
  details(std::type_identity<GTO(vector, x)>(), "x", offsetof(vector, x)); printf(",\n");
  details(std::type_identity<GTO(vector, y)>(), "y", offsetof(vector, y)); printf(",\n");
  details(std::type_identity<GTO(vector, z)>(), "z", offsetof(vector, z));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "matrix", sizeof(matrix));
  details(std::type_identity<GTO(matrix, rvec)>(), "rvec", offsetof(matrix, rvec)); printf(",\n");
  details(std::type_identity<GTO(matrix, uvec)>(), "uvec", offsetof(matrix, uvec)); printf(",\n");
  details(std::type_identity<GTO(matrix, fvec)>(), "fvec", offsetof(matrix, fvec));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ain_see", sizeof(ain_see));
  details(std::type_identity<GTO(ain_see, f_use_fov)>(), "f_use_fov", offsetof(ain_see, f_use_fov)); printf(",\n");
  details(std::type_identity<GTO(ain_see, max_dist)>(), "max_dist", offsetof(ain_see, max_dist));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ain_hear", sizeof(ain_hear));
  details(std::type_identity<GTO(ain_hear, f_directly_player)>(), "f_directly_player", offsetof(ain_hear, f_directly_player)); printf(",\n");
  details(std::type_identity<GTO(ain_hear, max_dist)>(), "max_dist", offsetof(ain_hear, max_dist)); printf(",\n");
  details(std::type_identity<GTO(ain_hear, hostile_level)>(), "hostile_level", offsetof(ain_hear, hostile_level)); printf(",\n");
  details(std::type_identity<GTO(ain_hear, curiosity_level)>(), "curiosity_level", offsetof(ain_hear, curiosity_level));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ai_path_info", sizeof(ai_path_info));
  details(std::type_identity<GTO(ai_path_info, cur_path)>(), "cur_path", offsetof(ai_path_info, cur_path)); printf(",\n");
  details(std::type_identity<GTO(ai_path_info, cur_node)>(), "cur_node", offsetof(ai_path_info, cur_node)); printf(",\n");
  details(std::type_identity<GTO(ai_path_info, num_paths)>(), "num_paths", offsetof(ai_path_info, num_paths)); printf(",\n");
  details(std::type_identity<GTO(ai_path_info, goal_uid)>(), "goal_uid", offsetof(ai_path_info, goal_uid)); printf(",\n");
  details(std::type_identity<GTO(ai_path_info, goal_index)>(), "goal_index", offsetof(ai_path_info, goal_index)); printf(",\n");
  details(std::type_identity<GTO(ai_path_info, path_id)>(), "path_id", offsetof(ai_path_info, path_id)); printf(",\n");
  details(std::type_identity<GTO(ai_path_info, path_type)>(), "path_type", offsetof(ai_path_info, path_type)); printf(",\n");
  details(std::type_identity<GTO(ai_path_info, path_start_node)>(), "path_start_node", offsetof(ai_path_info, path_start_node)); printf(",\n");
  details(std::type_identity<GTO(ai_path_info, path_end_node)>(), "path_end_node", offsetof(ai_path_info, path_end_node)); printf(",\n");
  details(std::type_identity<GTO(ai_path_info, path_flags)>(), "path_flags", offsetof(ai_path_info, path_flags));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ai_move_path", sizeof(ai_move_path));
  details(std::type_identity<GTO(ai_move_path, pos)>(), "pos", offsetof(ai_move_path, pos)); printf(",\n");
  details(std::type_identity<GTO(ai_move_path, orient)>(), "orient", offsetof(ai_move_path, orient)); printf(",\n");
  details(std::type_identity<GTO(ai_move_path, path_id)>(), "path_id", offsetof(ai_move_path, path_id));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "path_information", sizeof(path_information));
  details(std::type_identity<GTO(path_information, path_id)>(), "path_id", offsetof(path_information, path_id)); printf(",\n");
  details(std::type_identity<GTO(path_information, start_node)>(), "start_node", offsetof(path_information, start_node)); printf(",\n");
  details(std::type_identity<GTO(path_information, next_node)>(), "next_node", offsetof(path_information, next_node)); printf(",\n");
  details(std::type_identity<GTO(path_information, end_node)>(), "end_node", offsetof(path_information, end_node));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "goal_enabler", sizeof(goal_enabler));
  details(std::type_identity<GTO(goal_enabler, enabler_type)>(), "enabler_type", offsetof(goal_enabler, enabler_type)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, float_value)>(), "float_value", offsetof(goal_enabler, float_value)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, time)>(), "time", offsetof(goal_enabler, time)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, movement_type)>(), "movement_type", offsetof(goal_enabler, movement_type)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, flags)>(), "flags", offsetof(goal_enabler, flags)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, dist)>(), "dist", offsetof(goal_enabler, dist)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, awareness)>(), "awareness", offsetof(goal_enabler, awareness)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, percent_enable)>(), "percent_enable", offsetof(goal_enabler, percent_enable)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, check_interval)>(), "check_interval", offsetof(goal_enabler, check_interval)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, last_check_time)>(), "last_check_time", offsetof(goal_enabler, last_check_time)); printf(",\n");
  details(std::type_identity<GTO(goal_enabler, bool_next_enabler_op)>(), "bool_next_enabler_op", offsetof(goal_enabler, bool_next_enabler_op));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "gi_fire", sizeof(gi_fire));
  details(std::type_identity<GTO(gi_fire, cur_wb)>(), "cur_wb", offsetof(gi_fire, cur_wb)); printf(",\n");
  details(std::type_identity<GTO(gi_fire, cur_mask)>(), "cur_mask", offsetof(gi_fire, cur_mask)); printf(",\n");
  details(std::type_identity<GTO(gi_fire, melee_number)>(), "melee_number", offsetof(gi_fire, melee_number));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "g_steer", sizeof(g_steer));
  details(std::type_identity<GTO(g_steer, min_dist)>(), "min_dist", offsetof(g_steer, min_dist)); printf(",\n");
  details(std::type_identity<GTO(g_steer, max_dist)>(), "max_dist", offsetof(g_steer, max_dist)); printf(",\n");
  details(std::type_identity<GTO(g_steer, max_strength)>(), "max_strength", offsetof(g_steer, max_strength));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "g_floats", sizeof(g_floats));
  details(std::type_identity<GTO(g_floats, fp1)>(), "fp1", offsetof(g_floats, fp1)); printf(",\n");
  details(std::type_identity<GTO(g_floats, fp2)>(), "fp2", offsetof(g_floats, fp2)); printf(",\n");
  details(std::type_identity<GTO(g_floats, fp3)>(), "fp3", offsetof(g_floats, fp3));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "g_wander_extra", sizeof(g_wander_extra));
  details(std::type_identity<GTO(g_wander_extra, avoid_handle)>(), "avoid_handle", offsetof(g_wander_extra, avoid_handle)); printf(",\n");
  details(std::type_identity<GTO(g_wander_extra, min_rooms)>(), "min_rooms", offsetof(g_wander_extra, min_rooms)); printf(",\n");
  details(std::type_identity<GTO(g_wander_extra, max_rooms)>(), "max_rooms", offsetof(g_wander_extra, max_rooms)); printf(",\n");
  details(std::type_identity<GTO(g_wander_extra, flags)>(), "flags", offsetof(g_wander_extra, flags)); printf(",\n");
  details(std::type_identity<GTO(g_wander_extra, mine_index)>(), "mine_index", offsetof(g_wander_extra, mine_index));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "g_attach", sizeof(g_attach));
  details(std::type_identity<GTO(g_attach, rad)>(), "rad", offsetof(g_attach, rad)); printf(",\n");
  details(std::type_identity<GTO(g_attach, flags)>(), "flags", offsetof(g_attach, flags)); printf(",\n");
  details(std::type_identity<GTO(g_attach, parent_ap)>(), "parent_ap", offsetof(g_attach, parent_ap)); printf(",\n");
  details(std::type_identity<GTO(g_attach, child_ap)>(), "child_ap", offsetof(g_attach, child_ap));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "g_static_path", sizeof(g_static_path));
  details(std::type_identity<GTO(g_static_path, start_node)>(), "start_node", offsetof(g_static_path, start_node)); printf(",\n");
  details(std::type_identity<GTO(g_static_path, end_node)>(), "end_node", offsetof(g_static_path, end_node)); printf(",\n");
  details(std::type_identity<GTO(g_static_path, cur_node)>(), "cur_node", offsetof(g_static_path, cur_node));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "goal_info", sizeof(goal_info));
  details(std::type_identity<GTO(goal_info, handle)>(), "handle", offsetof(goal_info, handle)); printf(",\n");
  details(std::type_identity<GTO(goal_info, roomnum)>(), "roomnum", offsetof(goal_info, roomnum)); printf(",\n");
  details(std::type_identity<GTO(goal_info, f_actions)>(), "f_actions", offsetof(goal_info, f_actions)); printf(",\n");
  details(std::type_identity<GTO(goal_info, id)>(), "id", offsetof(goal_info, id)); printf(",\n");
  details(std::type_identity<GTO(goal_info, time)>(), "time", offsetof(goal_info, time)); printf(",\n");
  details(std::type_identity<GTO(goal_info, vec)>(), "vec", offsetof(goal_info, vec)); printf(",\n");
  details(std::type_identity<GTO(goal_info, pos)>(), "pos", offsetof(goal_info, pos)); printf(",\n");
  details(std::type_identity<GTO(goal_info, fs)>(), "fs", offsetof(goal_info, fs)); printf(",\n");
  details(std::type_identity<GTO(goal_info, dist_info)>(), "dist_info", offsetof(goal_info, dist_info)); printf(",\n");
  details(std::type_identity<GTO(goal_info, attach_info)>(), "attach_info", offsetof(goal_info, attach_info)); printf(",\n");
  details(std::type_identity<GTO(goal_info, wander_extra_info)>(), "wander_extra_info", offsetof(goal_info, wander_extra_info)); printf(",\n");
  details(std::type_identity<GTO(goal_info, static_path_info)>(), "static_path_info", offsetof(goal_info, static_path_info)); printf(",\n");
  details(std::type_identity<GTO(goal_info, scripted_data_ptr)>(), "scripted_data_ptr", offsetof(goal_info, scripted_data_ptr));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "goal", sizeof(goal));
  details(std::type_identity<GTO(goal, type)>(), "type", offsetof(goal, type)); printf(",\n");
  details(std::type_identity<GTO(goal, subtype)>(), "subtype", offsetof(goal, subtype)); printf(",\n");
  details(std::type_identity<GTO(goal, activation_level)>(), "activation_level", offsetof(goal, activation_level)); printf(",\n");
  details(std::type_identity<GTO(goal, creation_time)>(), "creation_time", offsetof(goal, creation_time)); printf(",\n");
  details(std::type_identity<GTO(goal, min_influence)>(), "min_influence", offsetof(goal, min_influence)); printf(",\n");
  details(std::type_identity<GTO(goal, influence)>(), "influence", offsetof(goal, influence)); printf(",\n");
  details(std::type_identity<GTO(goal, max_influence)>(), "max_influence", offsetof(goal, max_influence)); printf(",\n");
  details(std::type_identity<GTO(goal, ramp_influence_dists)>(), "ramp_influence_dists", offsetof(goal, ramp_influence_dists)); printf(",\n");
  details(std::type_identity<GTO(goal, g_info)>(), "g_info", offsetof(goal, g_info)); printf(",\n");
  details(std::type_identity<GTO(goal, num_enablers)>(), "num_enablers", offsetof(goal, num_enablers)); printf(",\n");
  details(std::type_identity<GTO(goal, enabler)>(), "enabler", offsetof(goal, enabler)); printf(",\n");
  details(std::type_identity<GTO(goal, circle_distance)>(), "circle_distance", offsetof(goal, circle_distance)); printf(",\n");
  details(std::type_identity<GTO(goal, status_reg)>(), "status_reg", offsetof(goal, status_reg)); printf(",\n");
  details(std::type_identity<GTO(goal, start_time)>(), "start_time", offsetof(goal, start_time)); printf(",\n");
  details(std::type_identity<GTO(goal, next_path_time)>(), "next_path_time", offsetof(goal, next_path_time)); printf(",\n");
  details(std::type_identity<GTO(goal, dist_to_goal)>(), "dist_to_goal", offsetof(goal, dist_to_goal)); printf(",\n");
  details(std::type_identity<GTO(goal, vec_to_target)>(), "vec_to_target", offsetof(goal, vec_to_target)); printf(",\n");
  details(std::type_identity<GTO(goal, next_check_see_target_time)>(), "next_check_see_target_time", offsetof(goal, next_check_see_target_time)); printf(",\n");
  details(std::type_identity<GTO(goal, last_see_target_pos)>(), "last_see_target_pos", offsetof(goal, last_see_target_pos)); printf(",\n");
  details(std::type_identity<GTO(goal, last_see_target_time)>(), "last_see_target_time", offsetof(goal, last_see_target_time)); printf(",\n");
  details(std::type_identity<GTO(goal, next_target_update_time)>(), "next_target_update_time", offsetof(goal, next_target_update_time)); printf(",\n");
  details(std::type_identity<GTO(goal, flags)>(), "flags", offsetof(goal, flags)); printf(",\n");
  details(std::type_identity<GTO(goal, guid)>(), "guid", offsetof(goal, guid)); printf(",\n");
  details(std::type_identity<GTO(goal, goal_uid)>(), "goal_uid", offsetof(goal, goal_uid)); printf(",\n");
  details(std::type_identity<GTO(goal, set_fvec)>(), "set_fvec", offsetof(goal, set_fvec)); printf(",\n");
  details(std::type_identity<GTO(goal, set_uvec)>(), "set_uvec", offsetof(goal, set_uvec)); printf(",\n");
  details(std::type_identity<GTO(goal, used)>(), "used", offsetof(goal, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "notify", sizeof(notify));
  details(std::type_identity<GTO(notify, obj_handle)>(), "obj_handle", offsetof(notify, obj_handle)); printf(",\n");
  details(std::type_identity<GTO(notify, goal_num)>(), "goal_num", offsetof(notify, goal_num)); printf(",\n");
  details(std::type_identity<GTO(notify, pos)>(), "pos", offsetof(notify, pos)); printf(",\n");
  details(std::type_identity<GTO(notify, movement_type)>(), "movement_type", offsetof(notify, movement_type)); printf(",\n");
  details(std::type_identity<GTO(notify, anim_type)>(), "anim_type", offsetof(notify, anim_type)); printf(",\n");
  details(std::type_identity<GTO(notify, attack_num)>(), "attack_num", offsetof(notify, attack_num)); printf(",\n");
  details(std::type_identity<GTO(notify, enabler_num)>(), "enabler_num", offsetof(notify, enabler_num)); printf(",\n");
  details(std::type_identity<GTO(notify, time)>(), "time", offsetof(notify, time));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "weapon_hit_info", sizeof(weapon_hit_info));
  details(std::type_identity<GTO(weapon_hit_info, parent_handle)>(), "parent_handle", offsetof(weapon_hit_info, parent_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon_hit_info, weapon_handle)>(), "weapon_handle", offsetof(weapon_hit_info, weapon_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon_hit_info, hit_face)>(), "hit_face", offsetof(weapon_hit_info, hit_face)); printf(",\n");
  details(std::type_identity<GTO(weapon_hit_info, hit_subobject)>(), "hit_subobject", offsetof(weapon_hit_info, hit_subobject)); printf(",\n");
  details(std::type_identity<GTO(weapon_hit_info, hit_damage)>(), "hit_damage", offsetof(weapon_hit_info, hit_damage)); printf(",\n");
  details(std::type_identity<GTO(weapon_hit_info, hit_pnt)>(), "hit_pnt", offsetof(weapon_hit_info, hit_pnt));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ai_mem", sizeof(ai_mem));
  details(std::type_identity<GTO(ai_mem, shields)>(), "shields", offsetof(ai_mem, shields)); printf(",\n");
  details(std::type_identity<GTO(ai_mem, num_enemies)>(), "num_enemies", offsetof(ai_mem, num_enemies)); printf(",\n");
  details(std::type_identity<GTO(ai_mem, num_friends)>(), "num_friends", offsetof(ai_mem, num_friends)); printf(",\n");
  details(std::type_identity<GTO(ai_mem, num_times_hit)>(), "num_times_hit", offsetof(ai_mem, num_times_hit)); printf(",\n");
  details(std::type_identity<GTO(ai_mem, num_enemy_shots_fired)>(), "num_enemy_shots_fired", offsetof(ai_mem, num_enemy_shots_fired)); printf(",\n");
  details(std::type_identity<GTO(ai_mem, num_hit_enemy)>(), "num_hit_enemy", offsetof(ai_mem, num_hit_enemy)); printf(",\n");
  details(std::type_identity<GTO(ai_mem, num_enemy_shots_dodged)>(), "num_enemy_shots_dodged", offsetof(ai_mem, num_enemy_shots_dodged));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ai_frame", sizeof(ai_frame));
  details(std::type_identity<GTO(ai_frame, ai_class)>(), "ai_class", offsetof(ai_frame, ai_class)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, ai_type)>(), "ai_type", offsetof(ai_frame, ai_type)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, path)>(), "path", offsetof(ai_frame, path)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, max_velocity)>(), "max_velocity", offsetof(ai_frame, max_velocity)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, max_delta_velocity)>(), "max_delta_velocity", offsetof(ai_frame, max_delta_velocity)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, max_turn_rate)>(), "max_turn_rate", offsetof(ai_frame, max_turn_rate)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, max_delta_turn_rate)>(), "max_delta_turn_rate", offsetof(ai_frame, max_delta_turn_rate)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, attack_vel_percent)>(), "attack_vel_percent", offsetof(ai_frame, attack_vel_percent)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, flee_vel_percent)>(), "flee_vel_percent", offsetof(ai_frame, flee_vel_percent)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, dodge_vel_percent)>(), "dodge_vel_percent", offsetof(ai_frame, dodge_vel_percent)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, circle_distance)>(), "circle_distance", offsetof(ai_frame, circle_distance)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, dodge_percent)>(), "dodge_percent", offsetof(ai_frame, dodge_percent)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, melee_damage)>(), "melee_damage", offsetof(ai_frame, melee_damage)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, melee_latency)>(), "melee_latency", offsetof(ai_frame, melee_latency)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, sound)>(), "sound", offsetof(ai_frame, sound)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, last_sound_time)>(), "last_sound_time", offsetof(ai_frame, last_sound_time)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, last_played_sound_index)>(), "last_played_sound_index", offsetof(ai_frame, last_played_sound_index)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, movement_type)>(), "movement_type", offsetof(ai_frame, movement_type)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, movement_subtype)>(), "movement_subtype", offsetof(ai_frame, movement_subtype)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, animation_type)>(), "animation_type", offsetof(ai_frame, animation_type)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, next_animation_type)>(), "next_animation_type", offsetof(ai_frame, next_animation_type)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, next_movement)>(), "next_movement", offsetof(ai_frame, next_movement)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, current_wb_firing)>(), "current_wb_firing", offsetof(ai_frame, current_wb_firing)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, last_special_wb_firing)>(), "last_special_wb_firing", offsetof(ai_frame, last_special_wb_firing)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, goals)>(), "goals", offsetof(ai_frame, goals)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, target_handle)>(), "target_handle", offsetof(ai_frame, target_handle)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, next_target_update_time)>(), "next_target_update_time", offsetof(ai_frame, next_target_update_time)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, dist_to_target_actual)>(), "dist_to_target_actual", offsetof(ai_frame, dist_to_target_actual)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, dist_to_target_perceived)>(), "dist_to_target_perceived", offsetof(ai_frame, dist_to_target_perceived)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, vec_to_target_actual)>(), "vec_to_target_actual", offsetof(ai_frame, vec_to_target_actual)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, vec_to_target_perceived)>(), "vec_to_target_perceived", offsetof(ai_frame, vec_to_target_perceived)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, next_check_see_target_time)>(), "next_check_see_target_time", offsetof(ai_frame, next_check_see_target_time)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, last_see_target_pos)>(), "last_see_target_pos", offsetof(ai_frame, last_see_target_pos)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, last_see_target_time)>(), "last_see_target_time", offsetof(ai_frame, last_see_target_time)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, last_hear_target_time)>(), "last_hear_target_time", offsetof(ai_frame, last_hear_target_time)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, weapon_speed)>(), "weapon_speed", offsetof(ai_frame, weapon_speed)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, next_melee_time)>(), "next_melee_time", offsetof(ai_frame, next_melee_time)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, last_render_time)>(), "last_render_time", offsetof(ai_frame, last_render_time)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, next_flinch_time)>(), "next_flinch_time", offsetof(ai_frame, next_flinch_time)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, status_reg)>(), "status_reg", offsetof(ai_frame, status_reg)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, flags)>(), "flags", offsetof(ai_frame, flags)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, notify_flags)>(), "notify_flags", offsetof(ai_frame, notify_flags)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, movement_dir)>(), "movement_dir", offsetof(ai_frame, movement_dir)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, rot_thrust_vector)>(), "rot_thrust_vector", offsetof(ai_frame, rot_thrust_vector)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, fov)>(), "fov", offsetof(ai_frame, fov)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, anim_sound_handle)>(), "anim_sound_handle", offsetof(ai_frame, anim_sound_handle)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, avoid_friends_distance)>(), "avoid_friends_distance", offsetof(ai_frame, avoid_friends_distance)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, frustration)>(), "frustration", offsetof(ai_frame, frustration)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, curiousity)>(), "curiousity", offsetof(ai_frame, curiousity)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, life_preservation)>(), "life_preservation", offsetof(ai_frame, life_preservation)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, agression)>(), "agression", offsetof(ai_frame, agression)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, cur_frustration)>(), "cur_frustration", offsetof(ai_frame, cur_frustration)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, cur_curiousity)>(), "cur_curiousity", offsetof(ai_frame, cur_curiousity)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, cur_life_preservation)>(), "cur_life_preservation", offsetof(ai_frame, cur_life_preservation)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, cur_agression)>(), "cur_agression", offsetof(ai_frame, cur_agression)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, mem_time_till_next_update)>(), "mem_time_till_next_update", offsetof(ai_frame, mem_time_till_next_update)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, memory)>(), "memory", offsetof(ai_frame, memory)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, fire_spread)>(), "fire_spread", offsetof(ai_frame, fire_spread)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, night_vision)>(), "night_vision", offsetof(ai_frame, night_vision)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, fog_vision)>(), "fog_vision", offsetof(ai_frame, fog_vision)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, lead_accuracy)>(), "lead_accuracy", offsetof(ai_frame, lead_accuracy)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, lead_varience)>(), "lead_varience", offsetof(ai_frame, lead_varience)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, fight_team)>(), "fight_team", offsetof(ai_frame, fight_team)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, fight_same)>(), "fight_same", offsetof(ai_frame, fight_same)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, hearing)>(), "hearing", offsetof(ai_frame, hearing)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, roaming)>(), "roaming", offsetof(ai_frame, roaming)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, leadership)>(), "leadership", offsetof(ai_frame, leadership)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, coop_same)>(), "coop_same", offsetof(ai_frame, coop_same)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, coop_team)>(), "coop_team", offsetof(ai_frame, coop_team)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, biased_flight_importance)>(), "biased_flight_importance", offsetof(ai_frame, biased_flight_importance)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, biased_flight_min)>(), "biased_flight_min", offsetof(ai_frame, biased_flight_min)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, biased_flight_max)>(), "biased_flight_max", offsetof(ai_frame, biased_flight_max)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, last_dodge_dir)>(), "last_dodge_dir", offsetof(ai_frame, last_dodge_dir)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, dodge_till_time)>(), "dodge_till_time", offsetof(ai_frame, dodge_till_time)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, awareness)>(), "awareness", offsetof(ai_frame, awareness)); printf(",\n");
  details(std::type_identity<GTO(ai_frame, saved_orient)>(), "saved_orient", offsetof(ai_frame, saved_orient));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ai_dynamic_path", sizeof(ai_dynamic_path));
  details(std::type_identity<GTO(ai_dynamic_path, pos)>(), "pos", offsetof(ai_dynamic_path, pos)); printf(",\n");
  details(std::type_identity<GTO(ai_dynamic_path, roomnum)>(), "roomnum", offsetof(ai_dynamic_path, roomnum)); printf(",\n");
  details(std::type_identity<GTO(ai_dynamic_path, num_nodes)>(), "num_nodes", offsetof(ai_dynamic_path, num_nodes)); printf(",\n");
  details(std::type_identity<GTO(ai_dynamic_path, use_count)>(), "use_count", offsetof(ai_dynamic_path, use_count)); printf(",\n");
  details(std::type_identity<GTO(ai_dynamic_path, owner_handle)>(), "owner_handle", offsetof(ai_dynamic_path, owner_handle));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "weather", sizeof(weather));
  details(std::type_identity<GTO(weather, flags)>(), "flags", offsetof(weather, flags)); printf(",\n");
  details(std::type_identity<GTO(weather, snow_intensity_scalar)>(), "snow_intensity_scalar", offsetof(weather, snow_intensity_scalar)); printf(",\n");
  details(std::type_identity<GTO(weather, rain_intensity_scalar)>(), "rain_intensity_scalar", offsetof(weather, rain_intensity_scalar)); printf(",\n");
  details(std::type_identity<GTO(weather, rain_color)>(), "rain_color", offsetof(weather, rain_color)); printf(",\n");
  details(std::type_identity<GTO(weather, lightning_color)>(), "lightning_color", offsetof(weather, lightning_color)); printf(",\n");
  details(std::type_identity<GTO(weather, sky_flash_color)>(), "sky_flash_color", offsetof(weather, sky_flash_color)); printf(",\n");
  details(std::type_identity<GTO(weather, lightning_sequence)>(), "lightning_sequence", offsetof(weather, lightning_sequence)); printf(",\n");
  details(std::type_identity<GTO(weather, last_lightning_evaluation_time)>(), "last_lightning_evaluation_time", offsetof(weather, last_lightning_evaluation_time)); printf(",\n");
  details(std::type_identity<GTO(weather, lightning_interval_time)>(), "lightning_interval_time", offsetof(weather, lightning_interval_time)); printf(",\n");
  details(std::type_identity<GTO(weather, lightning_rand_value)>(), "lightning_rand_value", offsetof(weather, lightning_rand_value)); printf(",\n");
  details(std::type_identity<GTO(weather, snowflakes_to_create)>(), "snowflakes_to_create", offsetof(weather, snowflakes_to_create));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "vis_attach_info", sizeof(vis_attach_info));
  details(std::type_identity<GTO(vis_attach_info, obj_handle)>(), "obj_handle", offsetof(vis_attach_info, obj_handle)); printf(",\n");
  details(std::type_identity<GTO(vis_attach_info, dest_objhandle)>(), "dest_objhandle", offsetof(vis_attach_info, dest_objhandle)); printf(",\n");
  details(std::type_identity<GTO(vis_attach_info, modelnum)>(), "modelnum", offsetof(vis_attach_info, modelnum)); printf(",\n");
  details(std::type_identity<GTO(vis_attach_info, vertnum)>(), "vertnum", offsetof(vis_attach_info, vertnum)); printf(",\n");
  details(std::type_identity<GTO(vis_attach_info, end_vertnum)>(), "end_vertnum", offsetof(vis_attach_info, end_vertnum)); printf(",\n");
  details(std::type_identity<GTO(vis_attach_info, subnum)>(), "subnum", offsetof(vis_attach_info, subnum)); printf(",\n");
  details(std::type_identity<GTO(vis_attach_info, subnum2)>(), "subnum2", offsetof(vis_attach_info, subnum2));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "axis_billboard_info", sizeof(axis_billboard_info));
  details(std::type_identity<GTO(axis_billboard_info, width)>(), "width", offsetof(axis_billboard_info, width)); printf(",\n");
  details(std::type_identity<GTO(axis_billboard_info, height)>(), "height", offsetof(axis_billboard_info, height)); printf(",\n");
  details(std::type_identity<GTO(axis_billboard_info, texture)>(), "texture", offsetof(axis_billboard_info, texture));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "vis_effect", sizeof(vis_effect));
  details(std::type_identity<GTO(vis_effect, pos)>(), "pos", offsetof(vis_effect, pos)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, end_pos)>(), "end_pos", offsetof(vis_effect, end_pos)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, velocity)>(), "velocity", offsetof(vis_effect, velocity)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, mass)>(), "mass", offsetof(vis_effect, mass)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, drag)>(), "drag", offsetof(vis_effect, drag)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, size)>(), "size", offsetof(vis_effect, size)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, lifeleft)>(), "lifeleft", offsetof(vis_effect, lifeleft)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, lifetime)>(), "lifetime", offsetof(vis_effect, lifetime)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, creation_time)>(), "creation_time", offsetof(vis_effect, creation_time)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, roomnum)>(), "roomnum", offsetof(vis_effect, roomnum)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, phys_flags)>(), "phys_flags", offsetof(vis_effect, phys_flags)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, custom_handle)>(), "custom_handle", offsetof(vis_effect, custom_handle)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, lighting_color)>(), "lighting_color", offsetof(vis_effect, lighting_color)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, flags)>(), "flags", offsetof(vis_effect, flags)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, next)>(), "next", offsetof(vis_effect, next)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, prev)>(), "prev", offsetof(vis_effect, prev)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, attach_info)>(), "attach_info", offsetof(vis_effect, attach_info)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, billboard_info)>(), "billboard_info", offsetof(vis_effect, billboard_info)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, movement_type)>(), "movement_type", offsetof(vis_effect, movement_type)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, type)>(), "type", offsetof(vis_effect, type)); printf(",\n");
  details(std::type_identity<GTO(vis_effect, id)>(), "id", offsetof(vis_effect, id));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "old_vis_attach_info", sizeof(old_vis_attach_info));
  details(std::type_identity<GTO(old_vis_attach_info, obj_handle)>(), "obj_handle", offsetof(old_vis_attach_info, obj_handle)); printf(",\n");
  details(std::type_identity<GTO(old_vis_attach_info, dest_objhandle)>(), "dest_objhandle", offsetof(old_vis_attach_info, dest_objhandle)); printf(",\n");
  details(std::type_identity<GTO(old_vis_attach_info, subnum)>(), "subnum", offsetof(old_vis_attach_info, subnum)); printf(",\n");
  details(std::type_identity<GTO(old_vis_attach_info, subnum2)>(), "subnum2", offsetof(old_vis_attach_info, subnum2)); printf(",\n");
  details(std::type_identity<GTO(old_vis_attach_info, modelnum)>(), "modelnum", offsetof(old_vis_attach_info, modelnum)); printf(",\n");
  details(std::type_identity<GTO(old_vis_attach_info, vertnum)>(), "vertnum", offsetof(old_vis_attach_info, vertnum)); printf(",\n");
  details(std::type_identity<GTO(old_vis_attach_info, end_vertnum)>(), "end_vertnum", offsetof(old_vis_attach_info, end_vertnum));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "old_vis_effect", sizeof(old_vis_effect));
  details(std::type_identity<GTO(old_vis_effect, type)>(), "type", offsetof(old_vis_effect, type)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, id)>(), "id", offsetof(old_vis_effect, id)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, pos)>(), "pos", offsetof(old_vis_effect, pos)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, velocity)>(), "velocity", offsetof(old_vis_effect, velocity)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, mass)>(), "mass", offsetof(old_vis_effect, mass)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, drag)>(), "drag", offsetof(old_vis_effect, drag)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, size)>(), "size", offsetof(old_vis_effect, size)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, lifeleft)>(), "lifeleft", offsetof(old_vis_effect, lifeleft)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, lifetime)>(), "lifetime", offsetof(old_vis_effect, lifetime)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, creation_time)>(), "creation_time", offsetof(old_vis_effect, creation_time)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, roomnum)>(), "roomnum", offsetof(old_vis_effect, roomnum)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, flags)>(), "flags", offsetof(old_vis_effect, flags)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, phys_flags)>(), "phys_flags", offsetof(old_vis_effect, phys_flags)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, movement_type)>(), "movement_type", offsetof(old_vis_effect, movement_type)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, custom_handle)>(), "custom_handle", offsetof(old_vis_effect, custom_handle)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, lighting_color)>(), "lighting_color", offsetof(old_vis_effect, lighting_color)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, attach_info)>(), "attach_info", offsetof(old_vis_effect, attach_info)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, billboard_info)>(), "billboard_info", offsetof(old_vis_effect, billboard_info)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, end_pos)>(), "end_pos", offsetof(old_vis_effect, end_pos)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, next)>(), "next", offsetof(old_vis_effect, next)); printf(",\n");
  details(std::type_identity<GTO(old_vis_effect, prev)>(), "prev", offsetof(old_vis_effect, prev));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "player_weapon", sizeof(player_weapon));
  details(std::type_identity<GTO(player_weapon, index)>(), "index", offsetof(player_weapon, index)); printf(",\n");
  details(std::type_identity<GTO(player_weapon, firing_time)>(), "firing_time", offsetof(player_weapon, firing_time)); printf(",\n");
  details(std::type_identity<GTO(player_weapon, sound_handle)>(), "sound_handle", offsetof(player_weapon, sound_handle));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "player", sizeof(player));
  details(std::type_identity<GTO(player, start_index)>(), "start_index", offsetof(player, start_index)); printf(",\n");
  details(std::type_identity<GTO(player, start_pos)>(), "start_pos", offsetof(player, start_pos)); printf(",\n");
  details(std::type_identity<GTO(player, start_roomnum)>(), "start_roomnum", offsetof(player, start_roomnum)); printf(",\n");
  details(std::type_identity<GTO(player, start_orient)>(), "start_orient", offsetof(player, start_orient)); printf(",\n");
  details(std::type_identity<GTO(player, startpos_flags)>(), "startpos_flags", offsetof(player, startpos_flags)); printf(",\n");
  details(std::type_identity<GTO(player, ship_index)>(), "ship_index", offsetof(player, ship_index)); printf(",\n");
  details(std::type_identity<GTO(player, callsign)>(), "callsign", offsetof(player, callsign)); printf(",\n");
  details(std::type_identity<GTO(player, flags)>(), "flags", offsetof(player, flags)); printf(",\n");
  details(std::type_identity<GTO(player, score)>(), "score", offsetof(player, score)); printf(",\n");
  details(std::type_identity<GTO(player, damage_magnitude)>(), "damage_magnitude", offsetof(player, damage_magnitude)); printf(",\n");
  details(std::type_identity<GTO(player, edrain_magnitude)>(), "edrain_magnitude", offsetof(player, edrain_magnitude)); printf(",\n");
  details(std::type_identity<GTO(player, invul_magnitude)>(), "invul_magnitude", offsetof(player, invul_magnitude)); printf(",\n");
  details(std::type_identity<GTO(player, energy)>(), "energy", offsetof(player, energy)); printf(",\n");
  details(std::type_identity<GTO(player, lives)>(), "lives", offsetof(player, lives)); printf(",\n");
  details(std::type_identity<GTO(player, level)>(), "level", offsetof(player, level)); printf(",\n");
  details(std::type_identity<GTO(player, starting_level)>(), "starting_level", offsetof(player, starting_level)); printf(",\n");
  details(std::type_identity<GTO(player, keys)>(), "keys", offsetof(player, keys)); printf(",\n");
  details(std::type_identity<GTO(player, killer_objnum)>(), "killer_objnum", offsetof(player, killer_objnum)); printf(",\n");
  details(std::type_identity<GTO(player, invulnerable_time)>(), "invulnerable_time", offsetof(player, invulnerable_time)); printf(",\n");
  details(std::type_identity<GTO(player, last_hit_wall_sound_time)>(), "last_hit_wall_sound_time", offsetof(player, last_hit_wall_sound_time)); printf(",\n");
  details(std::type_identity<GTO(player, last_homing_warning_sound_time)>(), "last_homing_warning_sound_time", offsetof(player, last_homing_warning_sound_time)); printf(",\n");
  details(std::type_identity<GTO(player, last_thrust_time)>(), "last_thrust_time", offsetof(player, last_thrust_time)); printf(",\n");
  details(std::type_identity<GTO(player, last_afterburner_time)>(), "last_afterburner_time", offsetof(player, last_afterburner_time)); printf(",\n");
  details(std::type_identity<GTO(player, objnum)>(), "objnum", offsetof(player, objnum)); printf(",\n");
  details(std::type_identity<GTO(player, team)>(), "team", offsetof(player, team)); printf(",\n");
  details(std::type_identity<GTO(player, current_auto_waypoint_room)>(), "current_auto_waypoint_room", offsetof(player, current_auto_waypoint_room)); printf(",\n");
  details(std::type_identity<GTO(player, time_level)>(), "time_level", offsetof(player, time_level)); printf(",\n");
  details(std::type_identity<GTO(player, time_total)>(), "time_total", offsetof(player, time_total)); printf(",\n");
  details(std::type_identity<GTO(player, num_hits_level)>(), "num_hits_level", offsetof(player, num_hits_level)); printf(",\n");
  details(std::type_identity<GTO(player, num_discharges_level)>(), "num_discharges_level", offsetof(player, num_discharges_level)); printf(",\n");
  details(std::type_identity<GTO(player, num_kills_level)>(), "num_kills_level", offsetof(player, num_kills_level)); printf(",\n");
  details(std::type_identity<GTO(player, friendly_kills_level)>(), "friendly_kills_level", offsetof(player, friendly_kills_level)); printf(",\n");
  details(std::type_identity<GTO(player, num_kills_total)>(), "num_kills_total", offsetof(player, num_kills_total)); printf(",\n");
  details(std::type_identity<GTO(player, weapon_flags)>(), "weapon_flags", offsetof(player, weapon_flags)); printf(",\n");
  details(std::type_identity<GTO(player, weapon_ammo)>(), "weapon_ammo", offsetof(player, weapon_ammo)); printf(",\n");
  details(std::type_identity<GTO(player, weapon)>(), "weapon", offsetof(player, weapon)); printf(",\n");
  details(std::type_identity<GTO(player, laser_level)>(), "laser_level", offsetof(player, laser_level)); printf(",\n");
  details(std::type_identity<GTO(player, light_dist)>(), "light_dist", offsetof(player, light_dist)); printf(",\n");
  details(std::type_identity<GTO(player, r)>(), "r", offsetof(player, r)); printf(",\n");
  details(std::type_identity<GTO(player, g)>(), "g", offsetof(player, g)); printf(",\n");
  details(std::type_identity<GTO(player, b)>(), "b", offsetof(player, b)); printf(",\n");
  details(std::type_identity<GTO(player, ballspeed)>(), "ballspeed", offsetof(player, ballspeed)); printf(",\n");
  details(std::type_identity<GTO(player, num_balls)>(), "num_balls", offsetof(player, num_balls)); printf(",\n");
  details(std::type_identity<GTO(player, ball_r)>(), "ball_r", offsetof(player, ball_r)); printf(",\n");
  details(std::type_identity<GTO(player, ball_g)>(), "ball_g", offsetof(player, ball_g)); printf(",\n");
  details(std::type_identity<GTO(player, ball_b)>(), "ball_b", offsetof(player, ball_b)); printf(",\n");
  details(std::type_identity<GTO(player, oldroom)>(), "oldroom", offsetof(player, oldroom)); printf(",\n");
  details(std::type_identity<GTO(player, inventory)>(), "inventory", offsetof(player, inventory)); printf(",\n");
  details(std::type_identity<GTO(player, counter_measures)>(), "counter_measures", offsetof(player, counter_measures)); printf(",\n");
  details(std::type_identity<GTO(player, last_fire_weapon_time)>(), "last_fire_weapon_time", offsetof(player, last_fire_weapon_time)); printf(",\n");
  details(std::type_identity<GTO(player, afterburner_mag)>(), "afterburner_mag", offsetof(player, afterburner_mag)); printf(",\n");
  details(std::type_identity<GTO(player, thrust_mag)>(), "thrust_mag", offsetof(player, thrust_mag)); printf(",\n");
  details(std::type_identity<GTO(player, afterburner_sound_handle)>(), "afterburner_sound_handle", offsetof(player, afterburner_sound_handle)); printf(",\n");
  details(std::type_identity<GTO(player, afterburn_time_left)>(), "afterburn_time_left", offsetof(player, afterburn_time_left)); printf(",\n");
  details(std::type_identity<GTO(player, thruster_sound_handle)>(), "thruster_sound_handle", offsetof(player, thruster_sound_handle)); printf(",\n");
  details(std::type_identity<GTO(player, thruster_sound_state)>(), "thruster_sound_state", offsetof(player, thruster_sound_state)); printf(",\n");
  details(std::type_identity<GTO(player, small_left_obj)>(), "small_left_obj", offsetof(player, small_left_obj)); printf(",\n");
  details(std::type_identity<GTO(player, small_right_obj)>(), "small_right_obj", offsetof(player, small_right_obj)); printf(",\n");
  details(std::type_identity<GTO(player, small_dll_obj)>(), "small_dll_obj", offsetof(player, small_dll_obj)); printf(",\n");
  details(std::type_identity<GTO(player, multiplayer_flags)>(), "multiplayer_flags", offsetof(player, multiplayer_flags)); printf(",\n");
  details(std::type_identity<GTO(player, last_multiplayer_flags)>(), "last_multiplayer_flags", offsetof(player, last_multiplayer_flags)); printf(",\n");
  details(std::type_identity<GTO(player, last_guided_time)>(), "last_guided_time", offsetof(player, last_guided_time)); printf(",\n");
  details(std::type_identity<GTO(player, tracker_id)>(), "tracker_id", offsetof(player, tracker_id)); printf(",\n");
  details(std::type_identity<GTO(player, kills)>(), "kills", offsetof(player, kills)); printf(",\n");
  details(std::type_identity<GTO(player, deaths)>(), "deaths", offsetof(player, deaths)); printf(",\n");
  details(std::type_identity<GTO(player, suicides)>(), "suicides", offsetof(player, suicides)); printf(",\n");
  details(std::type_identity<GTO(player, rank)>(), "rank", offsetof(player, rank)); printf(",\n");
  details(std::type_identity<GTO(player, lateral_thrust)>(), "lateral_thrust", offsetof(player, lateral_thrust)); printf(",\n");
  details(std::type_identity<GTO(player, rotational_thrust)>(), "rotational_thrust", offsetof(player, rotational_thrust)); printf(",\n");
  details(std::type_identity<GTO(player, time_in_game)>(), "time_in_game", offsetof(player, time_in_game)); printf(",\n");
  details(std::type_identity<GTO(player, guided_obj)>(), "guided_obj", offsetof(player, guided_obj)); printf(",\n");
  details(std::type_identity<GTO(player, user_timeout_obj)>(), "user_timeout_obj", offsetof(player, user_timeout_obj)); printf(",\n");
  details(std::type_identity<GTO(player, zoom_distance)>(), "zoom_distance", offsetof(player, zoom_distance)); printf(",\n");
  details(std::type_identity<GTO(player, movement_scalar)>(), "movement_scalar", offsetof(player, movement_scalar)); printf(",\n");
  details(std::type_identity<GTO(player, damage_scalar)>(), "damage_scalar", offsetof(player, damage_scalar)); printf(",\n");
  details(std::type_identity<GTO(player, armor_scalar)>(), "armor_scalar", offsetof(player, armor_scalar)); printf(",\n");
  details(std::type_identity<GTO(player, turn_scalar)>(), "turn_scalar", offsetof(player, turn_scalar)); printf(",\n");
  details(std::type_identity<GTO(player, weapon_recharge_scalar)>(), "weapon_recharge_scalar", offsetof(player, weapon_recharge_scalar)); printf(",\n");
  details(std::type_identity<GTO(player, weapon_speed_scalar)>(), "weapon_speed_scalar", offsetof(player, weapon_speed_scalar)); printf(",\n");
  details(std::type_identity<GTO(player, piggy_objnum)>(), "piggy_objnum", offsetof(player, piggy_objnum)); printf(",\n");
  details(std::type_identity<GTO(player, piggy_sig)>(), "piggy_sig", offsetof(player, piggy_sig)); printf(",\n");
  details(std::type_identity<GTO(player, custom_texture_handle)>(), "custom_texture_handle", offsetof(player, custom_texture_handle)); printf(",\n");
  details(std::type_identity<GTO(player, ship_permissions)>(), "ship_permissions", offsetof(player, ship_permissions)); printf(",\n");
  details(std::type_identity<GTO(player, invul_vector)>(), "invul_vector", offsetof(player, invul_vector)); printf(",\n");
  details(std::type_identity<GTO(player, controller_bitflags)>(), "controller_bitflags", offsetof(player, controller_bitflags)); printf(",\n");
  details(std::type_identity<GTO(player, num_markers)>(), "num_markers", offsetof(player, num_markers)); printf(",\n");
  details(std::type_identity<GTO(player, num_deaths_level)>(), "num_deaths_level", offsetof(player, num_deaths_level)); printf(",\n");
  details(std::type_identity<GTO(player, num_deaths_total)>(), "num_deaths_total", offsetof(player, num_deaths_total));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "guninfo", sizeof(guninfo));
  details(std::type_identity<GTO(guninfo, obj_handle)>(), "obj_handle", offsetof(guninfo, obj_handle)); printf(",\n");
  details(std::type_identity<GTO(guninfo, gunpoint)>(), "gunpoint", offsetof(guninfo, gunpoint));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "point_info", sizeof(point_info));
  details(std::type_identity<GTO(point_info, origin)>(), "origin", offsetof(point_info, origin)); printf(",\n");
  details(std::type_identity<GTO(point_info, normal)>(), "normal", offsetof(point_info, normal)); printf(",\n");
  details(std::type_identity<GTO(point_info, room_num)>(), "room_num", offsetof(point_info, room_num));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "spewinfo", sizeof(spewinfo));
  details(std::type_identity<GTO(spewinfo, flags)>(), "flags", offsetof(spewinfo, flags)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, inuse)>(), "inuse", offsetof(spewinfo, inuse)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, use_gunpoint)>(), "use_gunpoint", offsetof(spewinfo, use_gunpoint)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, real_obj)>(), "real_obj", offsetof(spewinfo, real_obj)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, pt)>(), "pt", offsetof(spewinfo, pt)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, gp)>(), "gp", offsetof(spewinfo, gp)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, effect_type)>(), "effect_type", offsetof(spewinfo, effect_type)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, phys_info)>(), "phys_info", offsetof(spewinfo, phys_info)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, random)>(), "random", offsetof(spewinfo, random)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, handle)>(), "handle", offsetof(spewinfo, handle)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, drag)>(), "drag", offsetof(spewinfo, drag)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, mass)>(), "mass", offsetof(spewinfo, mass)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, time_int)>(), "time_int", offsetof(spewinfo, time_int)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, longevity)>(), "longevity", offsetof(spewinfo, longevity)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, lifetime)>(), "lifetime", offsetof(spewinfo, lifetime)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, size)>(), "size", offsetof(spewinfo, size)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, speed)>(), "speed", offsetof(spewinfo, speed)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, time_until_next_blob)>(), "time_until_next_blob", offsetof(spewinfo, time_until_next_blob)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, start_time)>(), "start_time", offsetof(spewinfo, start_time)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, gp_normal)>(), "gp_normal", offsetof(spewinfo, gp_normal)); printf(",\n");
  details(std::type_identity<GTO(spewinfo, gun_point)>(), "gun_point", offsetof(spewinfo, gun_point));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "weapon", sizeof(weapon));
  details(std::type_identity<GTO(weapon, name)>(), "name", offsetof(weapon, name)); printf(",\n");
  details(std::type_identity<GTO(weapon, player_damage)>(), "player_damage", offsetof(weapon, player_damage)); printf(",\n");
  details(std::type_identity<GTO(weapon, generic_damage)>(), "generic_damage", offsetof(weapon, generic_damage)); printf(",\n");
  details(std::type_identity<GTO(weapon, alpha)>(), "alpha", offsetof(weapon, alpha)); printf(",\n");
  details(std::type_identity<GTO(weapon, sounds)>(), "sounds", offsetof(weapon, sounds)); printf(",\n");
  details(std::type_identity<GTO(weapon, hud_image_handle)>(), "hud_image_handle", offsetof(weapon, hud_image_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, fire_image_handle)>(), "fire_image_handle", offsetof(weapon, fire_image_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, explode_image_handle)>(), "explode_image_handle", offsetof(weapon, explode_image_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, smoke_handle)>(), "smoke_handle", offsetof(weapon, smoke_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, spawn_handle)>(), "spawn_handle", offsetof(weapon, spawn_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, alternate_spawn_handle)>(), "alternate_spawn_handle", offsetof(weapon, alternate_spawn_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, robot_spawn_handle)>(), "robot_spawn_handle", offsetof(weapon, robot_spawn_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, particle_handle)>(), "particle_handle", offsetof(weapon, particle_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, icon_handle)>(), "icon_handle", offsetof(weapon, icon_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, scorch_handle)>(), "scorch_handle", offsetof(weapon, scorch_handle)); printf(",\n");
  details(std::type_identity<GTO(weapon, spawn_count)>(), "spawn_count", offsetof(weapon, spawn_count)); printf(",\n");
  details(std::type_identity<GTO(weapon, alternate_chance)>(), "alternate_chance", offsetof(weapon, alternate_chance)); printf(",\n");
  details(std::type_identity<GTO(weapon, used)>(), "used", offsetof(weapon, used)); printf(",\n");
  details(std::type_identity<GTO(weapon, particle_count)>(), "particle_count", offsetof(weapon, particle_count)); printf(",\n");
  details(std::type_identity<GTO(weapon, terrain_damage_depth)>(), "terrain_damage_depth", offsetof(weapon, terrain_damage_depth)); printf(",\n");
  details(std::type_identity<GTO(weapon, terrain_damage_size)>(), "terrain_damage_size", offsetof(weapon, terrain_damage_size)); printf(",\n");
  details(std::type_identity<GTO(weapon, scorch_size)>(), "scorch_size", offsetof(weapon, scorch_size)); printf(",\n");
  details(std::type_identity<GTO(weapon, flags)>(), "flags", offsetof(weapon, flags)); printf(",\n");
  details(std::type_identity<GTO(weapon, size)>(), "size", offsetof(weapon, size)); printf(",\n");
  details(std::type_identity<GTO(weapon, life_time)>(), "life_time", offsetof(weapon, life_time)); printf(",\n");
  details(std::type_identity<GTO(weapon, thrust_time)>(), "thrust_time", offsetof(weapon, thrust_time)); printf(",\n");
  details(std::type_identity<GTO(weapon, impact_size)>(), "impact_size", offsetof(weapon, impact_size)); printf(",\n");
  details(std::type_identity<GTO(weapon, impact_time)>(), "impact_time", offsetof(weapon, impact_time)); printf(",\n");
  details(std::type_identity<GTO(weapon, impact_player_damage)>(), "impact_player_damage", offsetof(weapon, impact_player_damage)); printf(",\n");
  details(std::type_identity<GTO(weapon, impact_generic_damage)>(), "impact_generic_damage", offsetof(weapon, impact_generic_damage)); printf(",\n");
  details(std::type_identity<GTO(weapon, impact_force)>(), "impact_force", offsetof(weapon, impact_force)); printf(",\n");
  details(std::type_identity<GTO(weapon, explode_size)>(), "explode_size", offsetof(weapon, explode_size)); printf(",\n");
  details(std::type_identity<GTO(weapon, explode_time)>(), "explode_time", offsetof(weapon, explode_time)); printf(",\n");
  details(std::type_identity<GTO(weapon, particle_size)>(), "particle_size", offsetof(weapon, particle_size)); printf(",\n");
  details(std::type_identity<GTO(weapon, particle_life)>(), "particle_life", offsetof(weapon, particle_life)); printf(",\n");
  details(std::type_identity<GTO(weapon, gravity_size)>(), "gravity_size", offsetof(weapon, gravity_size)); printf(",\n");
  details(std::type_identity<GTO(weapon, gravity_time)>(), "gravity_time", offsetof(weapon, gravity_time)); printf(",\n");
  details(std::type_identity<GTO(weapon, custom_size)>(), "custom_size", offsetof(weapon, custom_size)); printf(",\n");
  details(std::type_identity<GTO(weapon, homing_fov)>(), "homing_fov", offsetof(weapon, homing_fov)); printf(",\n");
  details(std::type_identity<GTO(weapon, recoil_force)>(), "recoil_force", offsetof(weapon, recoil_force)); printf(",\n");
  details(std::type_identity<GTO(weapon, lighting_info)>(), "lighting_info", offsetof(weapon, lighting_info)); printf(",\n");
  details(std::type_identity<GTO(weapon, phys_info)>(), "phys_info", offsetof(weapon, phys_info));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "fusion_effect", sizeof(fusion_effect));
  details(std::type_identity<GTO(fusion_effect, total_time)>(), "total_time", offsetof(fusion_effect, total_time));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "vclip", sizeof(vclip));
  details(std::type_identity<GTO(vclip, name)>(), "name", offsetof(vclip, name)); printf(",\n");
  details(std::type_identity<GTO(vclip, num_frames)>(), "num_frames", offsetof(vclip, num_frames)); printf(",\n");
  details(std::type_identity<GTO(vclip, frames)>(), "frames", offsetof(vclip, frames)); printf(",\n");
  details(std::type_identity<GTO(vclip, frame_time)>(), "frame_time", offsetof(vclip, frame_time)); printf(",\n");
  details(std::type_identity<GTO(vclip, flags)>(), "flags", offsetof(vclip, flags)); printf(",\n");
  details(std::type_identity<GTO(vclip, target_size)>(), "target_size", offsetof(vclip, target_size)); printf(",\n");
  details(std::type_identity<GTO(vclip, used)>(), "used", offsetof(vclip, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tOSIRISTriggerScript", sizeof(tOSIRISTriggerScript));
  details(std::type_identity<GTO(tOSIRISTriggerScript, script_id)>(), "script_id", offsetof(tOSIRISTriggerScript, script_id)); printf(",\n");
  details(std::type_identity<GTO(tOSIRISTriggerScript, script_instance)>(), "script_instance", offsetof(tOSIRISTriggerScript, script_instance));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "trigger", sizeof(trigger));
  details(std::type_identity<GTO(trigger, name)>(), "name", offsetof(trigger, name)); printf(",\n");
  details(std::type_identity<GTO(trigger, roomnum)>(), "roomnum", offsetof(trigger, roomnum)); printf(",\n");
  details(std::type_identity<GTO(trigger, facenum)>(), "facenum", offsetof(trigger, facenum)); printf(",\n");
  details(std::type_identity<GTO(trigger, flags)>(), "flags", offsetof(trigger, flags)); printf(",\n");
  details(std::type_identity<GTO(trigger, activator)>(), "activator", offsetof(trigger, activator)); printf(",\n");
  details(std::type_identity<GTO(trigger, osiris_script)>(), "osiris_script", offsetof(trigger, osiris_script));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "terrain_segment", sizeof(terrain_segment));
  details(std::type_identity<GTO(terrain_segment, y)>(), "y", offsetof(terrain_segment, y)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, mody)>(), "mody", offsetof(terrain_segment, mody)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, l)>(), "l", offsetof(terrain_segment, l)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, r)>(), "r", offsetof(terrain_segment, r)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, g)>(), "g", offsetof(terrain_segment, g)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, b)>(), "b", offsetof(terrain_segment, b)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, objects)>(), "objects", offsetof(terrain_segment, objects)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, texseg_index)>(), "texseg_index", offsetof(terrain_segment, texseg_index)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, flags)>(), "flags", offsetof(terrain_segment, flags)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, lm_quad)>(), "lm_quad", offsetof(terrain_segment, lm_quad)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, ypos)>(), "ypos", offsetof(terrain_segment, ypos)); printf(",\n");
  details(std::type_identity<GTO(terrain_segment, pad)>(), "pad", offsetof(terrain_segment, pad));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "terrain_tex_segment", sizeof(terrain_tex_segment));
  details(std::type_identity<GTO(terrain_tex_segment, rotation)>(), "rotation", offsetof(terrain_tex_segment, rotation)); printf(",\n");
  details(std::type_identity<GTO(terrain_tex_segment, tex_index)>(), "tex_index", offsetof(terrain_tex_segment, tex_index));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "lodoff", sizeof(lodoff));
  details(std::type_identity<GTO(lodoff, cellnum)>(), "cellnum", offsetof(lodoff, cellnum)); printf(",\n");
  details(std::type_identity<GTO(lodoff, save_delta)>(), "save_delta", offsetof(lodoff, save_delta));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "terrain_sky", sizeof(terrain_sky));
  details(std::type_identity<GTO(terrain_sky, textured)>(), "textured", offsetof(terrain_sky, textured)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, horizon_vectors)>(), "horizon_vectors", offsetof(terrain_sky, horizon_vectors)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, horizon_u)>(), "horizon_u", offsetof(terrain_sky, horizon_u)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, horizon_v)>(), "horizon_v", offsetof(terrain_sky, horizon_v)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, dome_texture)>(), "dome_texture", offsetof(terrain_sky, dome_texture)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, radius)>(), "radius", offsetof(terrain_sky, radius)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, rotate_rate)>(), "rotate_rate", offsetof(terrain_sky, rotate_rate)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, sky_color)>(), "sky_color", offsetof(terrain_sky, sky_color)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, horizon_color)>(), "horizon_color", offsetof(terrain_sky, horizon_color)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, fog_color)>(), "fog_color", offsetof(terrain_sky, fog_color)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, satellite_r)>(), "satellite_r", offsetof(terrain_sky, satellite_r)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, satellite_g)>(), "satellite_g", offsetof(terrain_sky, satellite_g)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, satellite_b)>(), "satellite_b", offsetof(terrain_sky, satellite_b)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, star_vectors)>(), "star_vectors", offsetof(terrain_sky, star_vectors)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, satellite_vectors)>(), "satellite_vectors", offsetof(terrain_sky, satellite_vectors)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, satellite_flags)>(), "satellite_flags", offsetof(terrain_sky, satellite_flags)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, satellite_size)>(), "satellite_size", offsetof(terrain_sky, satellite_size)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, num_satellites)>(), "num_satellites", offsetof(terrain_sky, num_satellites)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, num_stars)>(), "num_stars", offsetof(terrain_sky, num_stars)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, satellite_texture)>(), "satellite_texture", offsetof(terrain_sky, satellite_texture)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, lightsource)>(), "lightsource", offsetof(terrain_sky, lightsource)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, lightangle)>(), "lightangle", offsetof(terrain_sky, lightangle)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, damage_per_second)>(), "damage_per_second", offsetof(terrain_sky, damage_per_second)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, fog_scalar)>(), "fog_scalar", offsetof(terrain_sky, fog_scalar)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, star_color)>(), "star_color", offsetof(terrain_sky, star_color)); printf(",\n");
  details(std::type_identity<GTO(terrain_sky, flags)>(), "flags", offsetof(terrain_sky, flags));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "link_tile", sizeof(link_tile));
  details(std::type_identity<GTO(link_tile, mine_seg)>(), "mine_seg", offsetof(link_tile, mine_seg)); printf(",\n");
  details(std::type_identity<GTO(link_tile, mine_side)>(), "mine_side", offsetof(link_tile, mine_side)); printf(",\n");
  details(std::type_identity<GTO(link_tile, portal_num)>(), "portal_num", offsetof(link_tile, portal_num)); printf(",\n");
  details(std::type_identity<GTO(link_tile, terrain_seg)>(), "terrain_seg", offsetof(link_tile, terrain_seg));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "terrain_mine_list", sizeof(terrain_mine_list));
  details(std::type_identity<GTO(terrain_mine_list, terrain_seg)>(), "terrain_seg", offsetof(terrain_mine_list, terrain_seg)); printf(",\n");
  details(std::type_identity<GTO(terrain_mine_list, num_segs)>(), "num_segs", offsetof(terrain_mine_list, num_segs)); printf(",\n");
  details(std::type_identity<GTO(terrain_mine_list, mine_segs)>(), "mine_segs", offsetof(terrain_mine_list, mine_segs));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "terrain_render_info", sizeof(terrain_render_info));
  details(std::type_identity<GTO(terrain_render_info, z)>(), "z", offsetof(terrain_render_info, z)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, right_edge)>(), "right_edge", offsetof(terrain_render_info, right_edge)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, left_edge)>(), "left_edge", offsetof(terrain_render_info, left_edge)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, top_edge)>(), "top_edge", offsetof(terrain_render_info, top_edge)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, bottom_edge)>(), "bottom_edge", offsetof(terrain_render_info, bottom_edge)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, right_count)>(), "right_count", offsetof(terrain_render_info, right_count)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, left_count)>(), "left_count", offsetof(terrain_render_info, left_count)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, top_count)>(), "top_count", offsetof(terrain_render_info, top_count)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, bottom_count)>(), "bottom_count", offsetof(terrain_render_info, bottom_count)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, segment)>(), "segment", offsetof(terrain_render_info, segment)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, lod)>(), "lod", offsetof(terrain_render_info, lod)); printf(",\n");
  details(std::type_identity<GTO(terrain_render_info, pad)>(), "pad", offsetof(terrain_render_info, pad));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "terrain_normals", sizeof(terrain_normals));
  details(std::type_identity<GTO(terrain_normals, normal1)>(), "normal1", offsetof(terrain_normals, normal1)); printf(",\n");
  details(std::type_identity<GTO(terrain_normals, normal2)>(), "normal2", offsetof(terrain_normals, normal2));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "specular_instance", sizeof(specular_instance));
  details(std::type_identity<GTO(specular_instance, bright_center)>(), "bright_center", offsetof(specular_instance, bright_center)); printf(",\n");
  details(std::type_identity<GTO(specular_instance, bright_color)>(), "bright_color", offsetof(specular_instance, bright_color));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "special_face", sizeof(special_face));
  details(std::type_identity<GTO(special_face, type)>(), "type", offsetof(special_face, type)); printf(",\n");
  details(std::type_identity<GTO(special_face, num)>(), "num", offsetof(special_face, num)); printf(",\n");
  details(std::type_identity<GTO(special_face, used)>(), "used", offsetof(special_face, used)); printf(",\n");
  details(std::type_identity<GTO(special_face, flags)>(), "flags", offsetof(special_face, flags)); printf(",\n");
  details(std::type_identity<GTO(special_face, spec_instance)>(), "spec_instance", offsetof(special_face, spec_instance)); printf(",\n");
  details(std::type_identity<GTO(special_face, vertnorms)>(), "vertnorms", offsetof(special_face, vertnorms));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ship", sizeof(ship));
  details(std::type_identity<GTO(ship, name)>(), "name", offsetof(ship, name)); printf(",\n");
  details(std::type_identity<GTO(ship, size)>(), "size", offsetof(ship, size)); printf(",\n");
  details(std::type_identity<GTO(ship, phys_info)>(), "phys_info", offsetof(ship, phys_info)); printf(",\n");
  details(std::type_identity<GTO(ship, model_handle)>(), "model_handle", offsetof(ship, model_handle)); printf(",\n");
  details(std::type_identity<GTO(ship, dying_model_handle)>(), "dying_model_handle", offsetof(ship, dying_model_handle)); printf(",\n");
  details(std::type_identity<GTO(ship, med_render_handle)>(), "med_render_handle", offsetof(ship, med_render_handle)); printf(",\n");
  details(std::type_identity<GTO(ship, lo_render_handle)>(), "lo_render_handle", offsetof(ship, lo_render_handle)); printf(",\n");
  details(std::type_identity<GTO(ship, med_lod_distance)>(), "med_lod_distance", offsetof(ship, med_lod_distance)); printf(",\n");
  details(std::type_identity<GTO(ship, lo_lod_distance)>(), "lo_lod_distance", offsetof(ship, lo_lod_distance)); printf(",\n");
  details(std::type_identity<GTO(ship, static_wb)>(), "static_wb", offsetof(ship, static_wb)); printf(",\n");
  details(std::type_identity<GTO(ship, fire_flags)>(), "fire_flags", offsetof(ship, fire_flags)); printf(",\n");
  details(std::type_identity<GTO(ship, max_ammo)>(), "max_ammo", offsetof(ship, max_ammo)); printf(",\n");
  details(std::type_identity<GTO(ship, firing_sound)>(), "firing_sound", offsetof(ship, firing_sound)); printf(",\n");
  details(std::type_identity<GTO(ship, firing_release_sound)>(), "firing_release_sound", offsetof(ship, firing_release_sound)); printf(",\n");
  details(std::type_identity<GTO(ship, spew_powerup)>(), "spew_powerup", offsetof(ship, spew_powerup)); printf(",\n");
  details(std::type_identity<GTO(ship, cockpit_name)>(), "cockpit_name", offsetof(ship, cockpit_name)); printf(",\n");
  details(std::type_identity<GTO(ship, hud_config_name)>(), "hud_config_name", offsetof(ship, hud_config_name)); printf(",\n");
  details(std::type_identity<GTO(ship, armor_scalar)>(), "armor_scalar", offsetof(ship, armor_scalar)); printf(",\n");
  details(std::type_identity<GTO(ship, flags)>(), "flags", offsetof(ship, flags)); printf(",\n");
  details(std::type_identity<GTO(ship, used)>(), "used", offsetof(ship, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "roomUVL", sizeof(roomUVL));
  details(std::type_identity<GTO(roomUVL, u)>(), "u", offsetof(roomUVL, u)); printf(",\n");
  details(std::type_identity<GTO(roomUVL, v)>(), "v", offsetof(roomUVL, v)); printf(",\n");
  details(std::type_identity<GTO(roomUVL, u2)>(), "u2", offsetof(roomUVL, u2)); printf(",\n");
  details(std::type_identity<GTO(roomUVL, v2)>(), "v2", offsetof(roomUVL, v2)); printf(",\n");
  details(std::type_identity<GTO(roomUVL, alpha)>(), "alpha", offsetof(roomUVL, alpha));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "face", sizeof(face));
  details(std::type_identity<GTO(face, flags)>(), "flags", offsetof(face, flags)); printf(",\n");
  details(std::type_identity<GTO(face, num_verts)>(), "num_verts", offsetof(face, num_verts)); printf(",\n");
  details(std::type_identity<GTO(face, portal_num)>(), "portal_num", offsetof(face, portal_num)); printf(",\n");
  details(std::type_identity<GTO(face, face_verts)>(), "face_verts", offsetof(face, face_verts)); printf(",\n");
  details(std::type_identity<GTO(face, face_uvls)>(), "face_uvls", offsetof(face, face_uvls)); printf(",\n");
  details(std::type_identity<GTO(face, normal)>(), "normal", offsetof(face, normal)); printf(",\n");
  details(std::type_identity<GTO(face, tmap)>(), "tmap", offsetof(face, tmap)); printf(",\n");
  details(std::type_identity<GTO(face, lmi_handle)>(), "lmi_handle", offsetof(face, lmi_handle)); printf(",\n");
  details(std::type_identity<GTO(face, special_handle)>(), "special_handle", offsetof(face, special_handle)); printf(",\n");
  details(std::type_identity<GTO(face, renderframe)>(), "renderframe", offsetof(face, renderframe)); printf(",\n");
  details(std::type_identity<GTO(face, light_multiple)>(), "light_multiple", offsetof(face, light_multiple)); printf(",\n");
  details(std::type_identity<GTO(face, min_xyz)>(), "min_xyz", offsetof(face, min_xyz)); printf(",\n");
  details(std::type_identity<GTO(face, max_xyz)>(), "max_xyz", offsetof(face, max_xyz));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "portal", sizeof(portal));
  details(std::type_identity<GTO(portal, flags)>(), "flags", offsetof(portal, flags)); printf(",\n");
  details(std::type_identity<GTO(portal, portal_face)>(), "portal_face", offsetof(portal, portal_face)); printf(",\n");
  details(std::type_identity<GTO(portal, croom)>(), "croom", offsetof(portal, croom)); printf(",\n");
  details(std::type_identity<GTO(portal, cportal)>(), "cportal", offsetof(portal, cportal)); printf(",\n");
  details(std::type_identity<GTO(portal, bnode_index)>(), "bnode_index", offsetof(portal, bnode_index)); printf(",\n");
  details(std::type_identity<GTO(portal, combine_master)>(), "combine_master", offsetof(portal, combine_master)); printf(",\n");
  details(std::type_identity<GTO(portal, path_pnt)>(), "path_pnt", offsetof(portal, path_pnt));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "room", sizeof(room));
  details(std::type_identity<GTO(room, flags)>(), "flags", offsetof(room, flags)); printf(",\n");
  details(std::type_identity<GTO(room, num_faces)>(), "num_faces", offsetof(room, num_faces)); printf(",\n");
  details(std::type_identity<GTO(room, num_portals)>(), "num_portals", offsetof(room, num_portals)); printf(",\n");
  details(std::type_identity<GTO(room, num_verts)>(), "num_verts", offsetof(room, num_verts)); printf(",\n");
  details(std::type_identity<GTO(room, faces)>(), "faces", offsetof(room, faces)); printf(",\n");
  details(std::type_identity<GTO(room, portals)>(), "portals", offsetof(room, portals)); printf(",\n");
  details(std::type_identity<GTO(room, verts)>(), "verts", offsetof(room, verts)); printf(",\n");
  details(std::type_identity<GTO(room, verts4)>(), "verts4", offsetof(room, verts4)); printf(",\n");
  details(std::type_identity<GTO(room, doorway_data)>(), "doorway_data", offsetof(room, doorway_data)); printf(",\n");
  details(std::type_identity<GTO(room, name)>(), "name", offsetof(room, name)); printf(",\n");
  details(std::type_identity<GTO(room, objects)>(), "objects", offsetof(room, objects)); printf(",\n");
  details(std::type_identity<GTO(room, max_xyz)>(), "max_xyz", offsetof(room, max_xyz)); printf(",\n");
  details(std::type_identity<GTO(room, min_xyz)>(), "min_xyz", offsetof(room, min_xyz)); printf(",\n");
  details(std::type_identity<GTO(room, last_render_time)>(), "last_render_time", offsetof(room, last_render_time)); printf(",\n");
  details(std::type_identity<GTO(room, bbf_min_xyz)>(), "bbf_min_xyz", offsetof(room, bbf_min_xyz)); printf(",\n");
  details(std::type_identity<GTO(room, bbf_max_xyz)>(), "bbf_max_xyz", offsetof(room, bbf_max_xyz)); printf(",\n");
  details(std::type_identity<GTO(room, num_bbf_regions)>(), "num_bbf_regions", offsetof(room, num_bbf_regions)); printf(",\n");
  details(std::type_identity<GTO(room, pad1)>(), "pad1", offsetof(room, pad1)); printf(",\n");
  details(std::type_identity<GTO(room, bbf_list)>(), "bbf_list", offsetof(room, bbf_list)); printf(",\n");
  details(std::type_identity<GTO(room, num_bbf)>(), "num_bbf", offsetof(room, num_bbf)); printf(",\n");
  details(std::type_identity<GTO(room, bbf_list_min_xyz)>(), "bbf_list_min_xyz", offsetof(room, bbf_list_min_xyz)); printf(",\n");
  details(std::type_identity<GTO(room, bbf_list_max_xyz)>(), "bbf_list_max_xyz", offsetof(room, bbf_list_max_xyz)); printf(",\n");
  details(std::type_identity<GTO(room, bbf_list_sector)>(), "bbf_list_sector", offsetof(room, bbf_list_sector)); printf(",\n");
  details(std::type_identity<GTO(room, bn_info)>(), "bn_info", offsetof(room, bn_info)); printf(",\n");
  details(std::type_identity<GTO(room, wpb_index)>(), "wpb_index", offsetof(room, wpb_index)); printf(",\n");
  details(std::type_identity<GTO(room, pulse_time)>(), "pulse_time", offsetof(room, pulse_time)); printf(",\n");
  details(std::type_identity<GTO(room, pulse_offset)>(), "pulse_offset", offsetof(room, pulse_offset)); printf(",\n");
  details(std::type_identity<GTO(room, wind)>(), "wind", offsetof(room, wind)); printf(",\n");
  details(std::type_identity<GTO(room, ambient_sound)>(), "ambient_sound", offsetof(room, ambient_sound)); printf(",\n");
  details(std::type_identity<GTO(room, vis_effects)>(), "vis_effects", offsetof(room, vis_effects)); printf(",\n");
  details(std::type_identity<GTO(room, mirror_face)>(), "mirror_face", offsetof(room, mirror_face)); printf(",\n");
  details(std::type_identity<GTO(room, num_mirror_faces)>(), "num_mirror_faces", offsetof(room, num_mirror_faces)); printf(",\n");
  details(std::type_identity<GTO(room, mirror_faces_list)>(), "mirror_faces_list", offsetof(room, mirror_faces_list)); printf(",\n");
  details(std::type_identity<GTO(room, damage)>(), "damage", offsetof(room, damage)); printf(",\n");
  details(std::type_identity<GTO(room, path_pnt)>(), "path_pnt", offsetof(room, path_pnt)); printf(",\n");
  details(std::type_identity<GTO(room, volume_lights)>(), "volume_lights", offsetof(room, volume_lights)); printf(",\n");
  details(std::type_identity<GTO(room, volume_width)>(), "volume_width", offsetof(room, volume_width)); printf(",\n");
  details(std::type_identity<GTO(room, volume_height)>(), "volume_height", offsetof(room, volume_height)); printf(",\n");
  details(std::type_identity<GTO(room, volume_depth)>(), "volume_depth", offsetof(room, volume_depth)); printf(",\n");
  details(std::type_identity<GTO(room, fog_depth)>(), "fog_depth", offsetof(room, fog_depth)); printf(",\n");
  details(std::type_identity<GTO(room, fog_r)>(), "fog_r", offsetof(room, fog_r)); printf(",\n");
  details(std::type_identity<GTO(room, fog_g)>(), "fog_g", offsetof(room, fog_g)); printf(",\n");
  details(std::type_identity<GTO(room, fog_b)>(), "fog_b", offsetof(room, fog_b)); printf(",\n");
  details(std::type_identity<GTO(room, env_reverb)>(), "env_reverb", offsetof(room, env_reverb)); printf(",\n");
  details(std::type_identity<GTO(room, room_change_flags)>(), "room_change_flags", offsetof(room, room_change_flags)); printf(",\n");
  details(std::type_identity<GTO(room, damage_type)>(), "damage_type", offsetof(room, damage_type)); printf(",\n");
  details(std::type_identity<GTO(room, used)>(), "used", offsetof(room, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "room_changes", sizeof(room_changes));
  details(std::type_identity<GTO(room_changes, roomnum)>(), "roomnum", offsetof(room_changes, roomnum)); printf(",\n");
  details(std::type_identity<GTO(room_changes, fog)>(), "fog", offsetof(room_changes, fog)); printf(",\n");
  details(std::type_identity<GTO(room_changes, start_vector)>(), "start_vector", offsetof(room_changes, start_vector)); printf(",\n");
  details(std::type_identity<GTO(room_changes, end_vector)>(), "end_vector", offsetof(room_changes, end_vector)); printf(",\n");
  details(std::type_identity<GTO(room_changes, start_depth)>(), "start_depth", offsetof(room_changes, start_depth)); printf(",\n");
  details(std::type_identity<GTO(room_changes, end_depth)>(), "end_depth", offsetof(room_changes, end_depth)); printf(",\n");
  details(std::type_identity<GTO(room_changes, start_time)>(), "start_time", offsetof(room_changes, start_time)); printf(",\n");
  details(std::type_identity<GTO(room_changes, total_time)>(), "total_time", offsetof(room_changes, total_time)); printf(",\n");
  details(std::type_identity<GTO(room_changes, used)>(), "used", offsetof(room_changes, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "poly_wb_info", sizeof(poly_wb_info));
  details(std::type_identity<GTO(poly_wb_info, num_gps)>(), "num_gps", offsetof(poly_wb_info, num_gps)); printf(",\n");
  details(std::type_identity<GTO(poly_wb_info, gp_index)>(), "gp_index", offsetof(poly_wb_info, gp_index)); printf(",\n");
  details(std::type_identity<GTO(poly_wb_info, num_turrets)>(), "num_turrets", offsetof(poly_wb_info, num_turrets)); printf(",\n");
  details(std::type_identity<GTO(poly_wb_info, turret_index)>(), "turret_index", offsetof(poly_wb_info, turret_index));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "otype_wb_info", sizeof(otype_wb_info));
  details(std::type_identity<GTO(otype_wb_info, gp_weapon_index)>(), "gp_weapon_index", offsetof(otype_wb_info, gp_weapon_index)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, fm_fire_sound_index)>(), "fm_fire_sound_index", offsetof(otype_wb_info, fm_fire_sound_index)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, aiming_gp_index)>(), "aiming_gp_index", offsetof(otype_wb_info, aiming_gp_index)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, num_masks)>(), "num_masks", offsetof(otype_wb_info, num_masks)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, gp_fire_masks)>(), "gp_fire_masks", offsetof(otype_wb_info, gp_fire_masks)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, gp_fire_wait)>(), "gp_fire_wait", offsetof(otype_wb_info, gp_fire_wait)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, gp_quad_fire_mask)>(), "gp_quad_fire_mask", offsetof(otype_wb_info, gp_quad_fire_mask)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, num_levels)>(), "num_levels", offsetof(otype_wb_info, num_levels)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, gp_level_weapon_index)>(), "gp_level_weapon_index", offsetof(otype_wb_info, gp_level_weapon_index)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, gp_level_fire_sound_index)>(), "gp_level_fire_sound_index", offsetof(otype_wb_info, gp_level_fire_sound_index)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, aiming_flags)>(), "aiming_flags", offsetof(otype_wb_info, aiming_flags)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, aiming_3d_dot)>(), "aiming_3d_dot", offsetof(otype_wb_info, aiming_3d_dot)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, aiming_3d_dist)>(), "aiming_3d_dist", offsetof(otype_wb_info, aiming_3d_dist)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, aiming_XZ_dot)>(), "aiming_XZ_dot", offsetof(otype_wb_info, aiming_XZ_dot)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, anim_start_frame)>(), "anim_start_frame", offsetof(otype_wb_info, anim_start_frame)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, anim_fire_frame)>(), "anim_fire_frame", offsetof(otype_wb_info, anim_fire_frame)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, anim_end_frame)>(), "anim_end_frame", offsetof(otype_wb_info, anim_end_frame)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, anim_time)>(), "anim_time", offsetof(otype_wb_info, anim_time)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, flags)>(), "flags", offsetof(otype_wb_info, flags)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, energy_usage)>(), "energy_usage", offsetof(otype_wb_info, energy_usage)); printf(",\n");
  details(std::type_identity<GTO(otype_wb_info, ammo_usage)>(), "ammo_usage", offsetof(otype_wb_info, ammo_usage));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "dynamic_wb_info", sizeof(dynamic_wb_info));
  details(std::type_identity<GTO(dynamic_wb_info, last_fire_time)>(), "last_fire_time", offsetof(dynamic_wb_info, last_fire_time)); printf(",\n");
  details(std::type_identity<GTO(dynamic_wb_info, cur_firing_mask)>(), "cur_firing_mask", offsetof(dynamic_wb_info, cur_firing_mask)); printf(",\n");
  details(std::type_identity<GTO(dynamic_wb_info, norm_turret_angle)>(), "norm_turret_angle", offsetof(dynamic_wb_info, norm_turret_angle)); printf(",\n");
  details(std::type_identity<GTO(dynamic_wb_info, turret_next_think_time)>(), "turret_next_think_time", offsetof(dynamic_wb_info, turret_next_think_time)); printf(",\n");
  details(std::type_identity<GTO(dynamic_wb_info, turret_direction)>(), "turret_direction", offsetof(dynamic_wb_info, turret_direction)); printf(",\n");
  details(std::type_identity<GTO(dynamic_wb_info, wb_anim_mask)>(), "wb_anim_mask", offsetof(dynamic_wb_info, wb_anim_mask)); printf(",\n");
  details(std::type_identity<GTO(dynamic_wb_info, wb_anim_frame)>(), "wb_anim_frame", offsetof(dynamic_wb_info, wb_anim_frame)); printf(",\n");
  details(std::type_identity<GTO(dynamic_wb_info, cur_target)>(), "cur_target", offsetof(dynamic_wb_info, cur_target)); printf(",\n");
  details(std::type_identity<GTO(dynamic_wb_info, upgrade_level)>(), "upgrade_level", offsetof(dynamic_wb_info, upgrade_level)); printf(",\n");
  details(std::type_identity<GTO(dynamic_wb_info, flags)>(), "flags", offsetof(dynamic_wb_info, flags));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "fog_portal_data", sizeof(fog_portal_data));
  details(std::type_identity<GTO(fog_portal_data, roomnum)>(), "roomnum", offsetof(fog_portal_data, roomnum)); printf(",\n");
  details(std::type_identity<GTO(fog_portal_data, close_dist)>(), "close_dist", offsetof(fog_portal_data, close_dist)); printf(",\n");
  details(std::type_identity<GTO(fog_portal_data, close_face)>(), "close_face", offsetof(fog_portal_data, close_face));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "state_limited_element", sizeof(state_limited_element));
  details(std::type_identity<GTO(state_limited_element, facenum)>(), "facenum", offsetof(state_limited_element, facenum)); printf(",\n");
  details(std::type_identity<GTO(state_limited_element, sort_key)>(), "sort_key", offsetof(state_limited_element, sort_key));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "powerup", sizeof(powerup));
  details(std::type_identity<GTO(powerup, name)>(), "name", offsetof(powerup, name)); printf(",\n");
  details(std::type_identity<GTO(powerup, size)>(), "size", offsetof(powerup, size)); printf(",\n");
  details(std::type_identity<GTO(powerup, score)>(), "score", offsetof(powerup, score)); printf(",\n");
  details(std::type_identity<GTO(powerup, image_handle)>(), "image_handle", offsetof(powerup, image_handle)); printf(",\n");
  details(std::type_identity<GTO(powerup, model_name)>(), "model_name", offsetof(powerup, model_name)); printf(",\n");
  details(std::type_identity<GTO(powerup, flags)>(), "flags", offsetof(powerup, flags)); printf(",\n");
  details(std::type_identity<GTO(powerup, used)>(), "used", offsetof(powerup, used)); printf(",\n");
  details(std::type_identity<GTO(powerup, sounds)>(), "sounds", offsetof(powerup, sounds)); printf(",\n");
  details(std::type_identity<GTO(powerup, phys_info)>(), "phys_info", offsetof(powerup, phys_info));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "postrender_struct", sizeof(postrender_struct));
  details(std::type_identity<GTO(postrender_struct, type)>(), "type", offsetof(postrender_struct, type)); printf(",\n");
  details(std::type_identity<GTO(postrender_struct, objnum)>(), "objnum", offsetof(postrender_struct, objnum)); printf(",\n");
  details(std::type_identity<GTO(postrender_struct, visnum)>(), "visnum", offsetof(postrender_struct, visnum)); printf(",\n");
  details(std::type_identity<GTO(postrender_struct, facenum)>(), "facenum", offsetof(postrender_struct, facenum)); printf(",\n");
  details(std::type_identity<GTO(postrender_struct, roomnum)>(), "roomnum", offsetof(postrender_struct, roomnum)); printf(",\n");
  details(std::type_identity<GTO(postrender_struct, z)>(), "z", offsetof(postrender_struct, z));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "player_pos_suppress", sizeof(player_pos_suppress));
  details(std::type_identity<GTO(player_pos_suppress, room)>(), "room", offsetof(player_pos_suppress, room)); printf(",\n");
  details(std::type_identity<GTO(player_pos_suppress, expire_time)>(), "expire_time", offsetof(player_pos_suppress, expire_time)); printf(",\n");
  details(std::type_identity<GTO(player_pos_suppress, ignored_pos)>(), "ignored_pos", offsetof(player_pos_suppress, ignored_pos)); printf(",\n");
  details(std::type_identity<GTO(player_pos_suppress, active)>(), "active", offsetof(player_pos_suppress, active));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "team", sizeof(team));
  details(std::type_identity<GTO(team, name)>(), "name", offsetof(team, name)); printf(",\n");
  details(std::type_identity<GTO(team, score)>(), "score", offsetof(team, score));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tMissionData", sizeof(tMissionData));
  details(std::type_identity<GTO(tMissionData, highest_level)>(), "highest_level", offsetof(tMissionData, highest_level)); printf(",\n");
  details(std::type_identity<GTO(tMissionData, ship_permissions)>(), "ship_permissions", offsetof(tMissionData, ship_permissions)); printf(",\n");
  details(std::type_identity<GTO(tMissionData, finished)>(), "finished", offsetof(tMissionData, finished)); printf(",\n");
  details(std::type_identity<GTO(tMissionData, mission_name)>(), "mission_name", offsetof(tMissionData, mission_name)); printf(",\n");
  details(std::type_identity<GTO(tMissionData, num_restores)>(), "num_restores", offsetof(tMissionData, num_restores)); printf(",\n");
  details(std::type_identity<GTO(tMissionData, num_saves)>(), "num_saves", offsetof(tMissionData, num_saves));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "cntrldata", sizeof(cntrldata));
  details(std::type_identity<GTO(cntrldata, id)>(), "id", offsetof(cntrldata, id)); printf(",\n");
  details(std::type_identity<GTO(cntrldata, type)>(), "type", offsetof(cntrldata, type)); printf(",\n");
  details(std::type_identity<GTO(cntrldata, value)>(), "value", offsetof(cntrldata, value)); printf(",\n");
  details(std::type_identity<GTO(cntrldata, flags)>(), "flags", offsetof(cntrldata, flags));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "pilot", sizeof(pilot));
  details(std::type_identity<GTO(pilot, filename)>(), "filename", offsetof(pilot, filename)); printf(",\n");
  details(std::type_identity<GTO(pilot, name)>(), "name", offsetof(pilot, name)); printf(",\n");
  details(std::type_identity<GTO(pilot, ship_logo)>(), "ship_logo", offsetof(pilot, ship_logo)); printf(",\n");
  details(std::type_identity<GTO(pilot, ship_model)>(), "ship_model", offsetof(pilot, ship_model)); printf(",\n");
  details(std::type_identity<GTO(pilot, audio1_file)>(), "audio1_file", offsetof(pilot, audio1_file)); printf(",\n");
  details(std::type_identity<GTO(pilot, audio2_file)>(), "audio2_file", offsetof(pilot, audio2_file)); printf(",\n");
  details(std::type_identity<GTO(pilot, audio3_file)>(), "audio3_file", offsetof(pilot, audio3_file)); printf(",\n");
  details(std::type_identity<GTO(pilot, audio4_file)>(), "audio4_file", offsetof(pilot, audio4_file)); printf(",\n");
  details(std::type_identity<GTO(pilot, guidebot_name)>(), "guidebot_name", offsetof(pilot, guidebot_name)); printf(",\n");
  details(std::type_identity<GTO(pilot, picture_id)>(), "picture_id", offsetof(pilot, picture_id)); printf(",\n");
  details(std::type_identity<GTO(pilot, difficulty)>(), "difficulty", offsetof(pilot, difficulty)); printf(",\n");
  details(std::type_identity<GTO(pilot, hud_mode)>(), "hud_mode", offsetof(pilot, hud_mode)); printf(",\n");
  details(std::type_identity<GTO(pilot, profanity_filter_on)>(), "profanity_filter_on", offsetof(pilot, profanity_filter_on)); printf(",\n");
  details(std::type_identity<GTO(pilot, audiotaunts)>(), "audiotaunts", offsetof(pilot, audiotaunts)); printf(",\n");
  details(std::type_identity<GTO(pilot, hud_stat)>(), "hud_stat", offsetof(pilot, hud_stat)); printf(",\n");
  details(std::type_identity<GTO(pilot, hud_graphical_stat)>(), "hud_graphical_stat", offsetof(pilot, hud_graphical_stat)); printf(",\n");
  details(std::type_identity<GTO(pilot, game_window_w)>(), "game_window_w", offsetof(pilot, game_window_w)); printf(",\n");
  details(std::type_identity<GTO(pilot, game_window_h)>(), "game_window_h", offsetof(pilot, game_window_h)); printf(",\n");
  details(std::type_identity<GTO(pilot, num_missions_flown)>(), "num_missions_flown", offsetof(pilot, num_missions_flown)); printf(",\n");
  details(std::type_identity<GTO(pilot, mission_data)>(), "mission_data", offsetof(pilot, mission_data)); printf(",\n");
  details(std::type_identity<GTO(pilot, PrimarySelectList)>(), "PrimarySelectList", offsetof(pilot, PrimarySelectList)); printf(",\n");
  details(std::type_identity<GTO(pilot, SecondarySelectList)>(), "SecondarySelectList", offsetof(pilot, SecondarySelectList)); printf(",\n");
  details(std::type_identity<GTO(pilot, gameplay_toggles)>(), "gameplay_toggles", offsetof(pilot, gameplay_toggles)); printf(",\n");
  details(std::type_identity<GTO(pilot, taunts)>(), "taunts", offsetof(pilot, taunts)); printf(",\n");
  details(std::type_identity<GTO(pilot, controls)>(), "controls", offsetof(pilot, controls)); printf(",\n");
  details(std::type_identity<GTO(pilot, mouse_sensitivity)>(), "mouse_sensitivity", offsetof(pilot, mouse_sensitivity)); printf(",\n");
  details(std::type_identity<GTO(pilot, joy_sensitivity)>(), "joy_sensitivity", offsetof(pilot, joy_sensitivity)); printf(",\n");
  details(std::type_identity<GTO(pilot, key_ramping)>(), "key_ramping", offsetof(pilot, key_ramping)); printf(",\n");
  details(std::type_identity<GTO(pilot, read_controller)>(), "read_controller", offsetof(pilot, read_controller)); printf(",\n");
  details(std::type_identity<GTO(pilot, mouselook_control)>(), "mouselook_control", offsetof(pilot, mouselook_control)); printf(",\n");
  details(std::type_identity<GTO(pilot, lrearview_enabled)>(), "lrearview_enabled", offsetof(pilot, lrearview_enabled)); printf(",\n");
  details(std::type_identity<GTO(pilot, rrearview_enabled)>(), "rrearview_enabled", offsetof(pilot, rrearview_enabled)); printf(",\n");
  details(std::type_identity<GTO(pilot, ingame_difficulty)>(), "ingame_difficulty", offsetof(pilot, ingame_difficulty));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "death_info", sizeof(death_info));
  details(std::type_identity<GTO(death_info, flags)>(), "flags", offsetof(death_info, flags)); printf(",\n");
  details(std::type_identity<GTO(death_info, delay_min)>(), "delay_min", offsetof(death_info, delay_min)); printf(",\n");
  details(std::type_identity<GTO(death_info, delay_max)>(), "delay_max", offsetof(death_info, delay_max));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "t_ai_info", sizeof(t_ai_info));
  details(std::type_identity<GTO(t_ai_info, ai_class)>(), "ai_class", offsetof(t_ai_info, ai_class)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, ai_type)>(), "ai_type", offsetof(t_ai_info, ai_type)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, max_velocity)>(), "max_velocity", offsetof(t_ai_info, max_velocity)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, max_delta_velocity)>(), "max_delta_velocity", offsetof(t_ai_info, max_delta_velocity)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, max_turn_rate)>(), "max_turn_rate", offsetof(t_ai_info, max_turn_rate)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, max_delta_turn_rate)>(), "max_delta_turn_rate", offsetof(t_ai_info, max_delta_turn_rate)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, attack_vel_percent)>(), "attack_vel_percent", offsetof(t_ai_info, attack_vel_percent)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, flee_vel_percent)>(), "flee_vel_percent", offsetof(t_ai_info, flee_vel_percent)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, dodge_vel_percent)>(), "dodge_vel_percent", offsetof(t_ai_info, dodge_vel_percent)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, circle_distance)>(), "circle_distance", offsetof(t_ai_info, circle_distance)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, dodge_percent)>(), "dodge_percent", offsetof(t_ai_info, dodge_percent)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, melee_damage)>(), "melee_damage", offsetof(t_ai_info, melee_damage)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, melee_latency)>(), "melee_latency", offsetof(t_ai_info, melee_latency)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, sound)>(), "sound", offsetof(t_ai_info, sound)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, movement_type)>(), "movement_type", offsetof(t_ai_info, movement_type)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, movement_subtype)>(), "movement_subtype", offsetof(t_ai_info, movement_subtype)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, flags)>(), "flags", offsetof(t_ai_info, flags)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, notify_flags)>(), "notify_flags", offsetof(t_ai_info, notify_flags)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, fov)>(), "fov", offsetof(t_ai_info, fov)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, avoid_friends_distance)>(), "avoid_friends_distance", offsetof(t_ai_info, avoid_friends_distance)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, frustration)>(), "frustration", offsetof(t_ai_info, frustration)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, curiousity)>(), "curiousity", offsetof(t_ai_info, curiousity)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, life_preservation)>(), "life_preservation", offsetof(t_ai_info, life_preservation)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, agression)>(), "agression", offsetof(t_ai_info, agression)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, fire_spread)>(), "fire_spread", offsetof(t_ai_info, fire_spread)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, night_vision)>(), "night_vision", offsetof(t_ai_info, night_vision)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, fog_vision)>(), "fog_vision", offsetof(t_ai_info, fog_vision)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, lead_accuracy)>(), "lead_accuracy", offsetof(t_ai_info, lead_accuracy)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, lead_varience)>(), "lead_varience", offsetof(t_ai_info, lead_varience)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, fight_team)>(), "fight_team", offsetof(t_ai_info, fight_team)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, fight_same)>(), "fight_same", offsetof(t_ai_info, fight_same)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, hearing)>(), "hearing", offsetof(t_ai_info, hearing)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, roaming)>(), "roaming", offsetof(t_ai_info, roaming)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, biased_flight_importance)>(), "biased_flight_importance", offsetof(t_ai_info, biased_flight_importance)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, biased_flight_min)>(), "biased_flight_min", offsetof(t_ai_info, biased_flight_min)); printf(",\n");
  details(std::type_identity<GTO(t_ai_info, biased_flight_max)>(), "biased_flight_max", offsetof(t_ai_info, biased_flight_max));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "object_info", sizeof(object_info));
  details(std::type_identity<GTO(object_info, name)>(), "name", offsetof(object_info, name)); printf(",\n");
  details(std::type_identity<GTO(object_info, type)>(), "type", offsetof(object_info, type)); printf(",\n");
  details(std::type_identity<GTO(object_info, size)>(), "size", offsetof(object_info, size)); printf(",\n");
  details(std::type_identity<GTO(object_info, flags)>(), "flags", offsetof(object_info, flags)); printf(",\n");
  details(std::type_identity<GTO(object_info, render_handle)>(), "render_handle", offsetof(object_info, render_handle)); printf(",\n");
  details(std::type_identity<GTO(object_info, med_render_handle)>(), "med_render_handle", offsetof(object_info, med_render_handle)); printf(",\n");
  details(std::type_identity<GTO(object_info, lo_render_handle)>(), "lo_render_handle", offsetof(object_info, lo_render_handle)); printf(",\n");
  details(std::type_identity<GTO(object_info, med_lod_distance)>(), "med_lod_distance", offsetof(object_info, med_lod_distance)); printf(",\n");
  details(std::type_identity<GTO(object_info, lo_lod_distance)>(), "lo_lod_distance", offsetof(object_info, lo_lod_distance)); printf(",\n");
  details(std::type_identity<GTO(object_info, score)>(), "score", offsetof(object_info, score)); printf(",\n");
  details(std::type_identity<GTO(object_info, hit_points)>(), "hit_points", offsetof(object_info, hit_points)); printf(",\n");
  details(std::type_identity<GTO(object_info, damage)>(), "damage", offsetof(object_info, damage)); printf(",\n");
  details(std::type_identity<GTO(object_info, impact_size)>(), "impact_size", offsetof(object_info, impact_size)); printf(",\n");
  details(std::type_identity<GTO(object_info, impact_time)>(), "impact_time", offsetof(object_info, impact_time)); printf(",\n");
  details(std::type_identity<GTO(object_info, ammo_count)>(), "ammo_count", offsetof(object_info, ammo_count)); printf(",\n");
  details(std::type_identity<GTO(object_info, description)>(), "description", offsetof(object_info, description)); printf(",\n");
  details(std::type_identity<GTO(object_info, icon_name)>(), "icon_name", offsetof(object_info, icon_name)); printf(",\n");
  details(std::type_identity<GTO(object_info, sounds)>(), "sounds", offsetof(object_info, sounds)); printf(",\n");
  details(std::type_identity<GTO(object_info, dspew)>(), "dspew", offsetof(object_info, dspew)); printf(",\n");
  details(std::type_identity<GTO(object_info, dspew_percent)>(), "dspew_percent", offsetof(object_info, dspew_percent)); printf(",\n");
  details(std::type_identity<GTO(object_info, dspew_number)>(), "dspew_number", offsetof(object_info, dspew_number)); printf(",\n");
  details(std::type_identity<GTO(object_info, f_dspew)>(), "f_dspew", offsetof(object_info, f_dspew)); printf(",\n");
  details(std::type_identity<GTO(object_info, phys_info)>(), "phys_info", offsetof(object_info, phys_info)); printf(",\n");
  details(std::type_identity<GTO(object_info, lighting_info)>(), "lighting_info", offsetof(object_info, lighting_info)); printf(",\n");
  details(std::type_identity<GTO(object_info, respawn_scalar)>(), "respawn_scalar", offsetof(object_info, respawn_scalar)); printf(",\n");
  details(std::type_identity<GTO(object_info, multi_allowed)>(), "multi_allowed", offsetof(object_info, multi_allowed)); printf(",\n");
  details(std::type_identity<GTO(object_info, module_name)>(), "module_name", offsetof(object_info, module_name)); printf(",\n");
  details(std::type_identity<GTO(object_info, script_name_override)>(), "script_name_override", offsetof(object_info, script_name_override)); printf(",\n");
  details(std::type_identity<GTO(object_info, death_types)>(), "death_types", offsetof(object_info, death_types)); printf(",\n");
  details(std::type_identity<GTO(object_info, death_probabilities)>(), "death_probabilities", offsetof(object_info, death_probabilities)); printf(",\n");
  details(std::type_identity<GTO(object_info, ai_info)>(), "ai_info", offsetof(object_info, ai_info)); printf(",\n");
  details(std::type_identity<GTO(object_info, static_wb)>(), "static_wb", offsetof(object_info, static_wb)); printf(",\n");
  details(std::type_identity<GTO(object_info, anim)>(), "anim", offsetof(object_info, anim));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "network_game", sizeof(network_game));
  details(std::type_identity<GTO(network_game, addr)>(), "addr", offsetof(network_game, addr)); printf(",\n");
  details(std::type_identity<GTO(network_game, name)>(), "name", offsetof(network_game, name)); printf(",\n");
  details(std::type_identity<GTO(network_game, mission)>(), "mission", offsetof(network_game, mission)); printf(",\n");
  details(std::type_identity<GTO(network_game, mission_name)>(), "mission_name", offsetof(network_game, mission_name)); printf(",\n");
  details(std::type_identity<GTO(network_game, scriptname)>(), "scriptname", offsetof(network_game, scriptname)); printf(",\n");
  details(std::type_identity<GTO(network_game, level_num)>(), "level_num", offsetof(network_game, level_num)); printf(",\n");
  details(std::type_identity<GTO(network_game, curr_num_players)>(), "curr_num_players", offsetof(network_game, curr_num_players)); printf(",\n");
  details(std::type_identity<GTO(network_game, max_num_players)>(), "max_num_players", offsetof(network_game, max_num_players)); printf(",\n");
  details(std::type_identity<GTO(network_game, server_response_time)>(), "server_response_time", offsetof(network_game, server_response_time)); printf(",\n");
  details(std::type_identity<GTO(network_game, flags)>(), "flags", offsetof(network_game, flags)); printf(",\n");
  details(std::type_identity<GTO(network_game, last_update)>(), "last_update", offsetof(network_game, last_update)); printf(",\n");
  details(std::type_identity<GTO(network_game, dedicated_server)>(), "dedicated_server", offsetof(network_game, dedicated_server)); printf(",\n");
  details(std::type_identity<GTO(network_game, difficulty)>(), "difficulty", offsetof(network_game, difficulty)); printf(",\n");
  details(std::type_identity<GTO(network_game, handle)>(), "handle", offsetof(network_game, handle));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "netgame_info", sizeof(netgame_info));
  details(std::type_identity<GTO(netgame_info, server_version)>(), "server_version", offsetof(netgame_info, server_version)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, name)>(), "name", offsetof(netgame_info, name)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, mission)>(), "mission", offsetof(netgame_info, mission)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, mission_name)>(), "mission_name", offsetof(netgame_info, mission_name)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, scriptname)>(), "scriptname", offsetof(netgame_info, scriptname)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, server_config_name)>(), "server_config_name", offsetof(netgame_info, server_config_name)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, connection_name)>(), "connection_name", offsetof(netgame_info, connection_name)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, server_address)>(), "server_address", offsetof(netgame_info, server_address)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, local_role)>(), "local_role", offsetof(netgame_info, local_role)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, server_sequence)>(), "server_sequence", offsetof(netgame_info, server_sequence)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, last_server_time)>(), "last_server_time", offsetof(netgame_info, last_server_time)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, packets_per_second)>(), "packets_per_second", offsetof(netgame_info, packets_per_second)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, flags)>(), "flags", offsetof(netgame_info, flags)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, timelimit)>(), "timelimit", offsetof(netgame_info, timelimit)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, killgoal)>(), "killgoal", offsetof(netgame_info, killgoal)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, respawn_time)>(), "respawn_time", offsetof(netgame_info, respawn_time)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, max_players)>(), "max_players", offsetof(netgame_info, max_players)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, difficulty)>(), "difficulty", offsetof(netgame_info, difficulty)); printf(",\n");
  details(std::type_identity<GTO(netgame_info, digest)>(), "digest", offsetof(netgame_info, digest));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "player_fire_packet", sizeof(player_fire_packet));
  details(std::type_identity<GTO(player_fire_packet, fired_on_this_frame)>(), "fired_on_this_frame", offsetof(player_fire_packet, fired_on_this_frame)); printf(",\n");
  details(std::type_identity<GTO(player_fire_packet, wb_index)>(), "wb_index", offsetof(player_fire_packet, wb_index)); printf(",\n");
  details(std::type_identity<GTO(player_fire_packet, fire_mask)>(), "fire_mask", offsetof(player_fire_packet, fire_mask)); printf(",\n");
  details(std::type_identity<GTO(player_fire_packet, damage_scalar)>(), "damage_scalar", offsetof(player_fire_packet, damage_scalar)); printf(",\n");
  details(std::type_identity<GTO(player_fire_packet, reliable)>(), "reliable", offsetof(player_fire_packet, reliable)); printf(",\n");
  details(std::type_identity<GTO(player_fire_packet, dest_roomnum)>(), "dest_roomnum", offsetof(player_fire_packet, dest_roomnum));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "multi_orientation", sizeof(multi_orientation));
  details(std::type_identity<GTO(multi_orientation, multi_matrix)>(), "multi_matrix", offsetof(multi_orientation, multi_matrix));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "powerup_respawn", sizeof(powerup_respawn));
  details(std::type_identity<GTO(powerup_respawn, pos)>(), "pos", offsetof(powerup_respawn, pos)); printf(",\n");
  details(std::type_identity<GTO(powerup_respawn, objnum)>(), "objnum", offsetof(powerup_respawn, objnum)); printf(",\n");
  details(std::type_identity<GTO(powerup_respawn, roomnum)>(), "roomnum", offsetof(powerup_respawn, roomnum)); printf(",\n");
  details(std::type_identity<GTO(powerup_respawn, used)>(), "used", offsetof(powerup_respawn, used)); printf(",\n");
  details(std::type_identity<GTO(powerup_respawn, original_id)>(), "original_id", offsetof(powerup_respawn, original_id));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "powerup_timer", sizeof(powerup_timer));
  details(std::type_identity<GTO(powerup_timer, id)>(), "id", offsetof(powerup_timer, id)); printf(",\n");
  details(std::type_identity<GTO(powerup_timer, respawn_time)>(), "respawn_time", offsetof(powerup_timer, respawn_time));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "vmt_descent3_struct", sizeof(vmt_descent3_struct));
  details(std::type_identity<GTO(vmt_descent3_struct, tracker_id)>(), "tracker_id", offsetof(vmt_descent3_struct, tracker_id)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, pilot_name)>(), "pilot_name", offsetof(vmt_descent3_struct, pilot_name)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, rank)>(), "rank", offsetof(vmt_descent3_struct, rank)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, kills)>(), "kills", offsetof(vmt_descent3_struct, kills)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, deaths)>(), "deaths", offsetof(vmt_descent3_struct, deaths)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, suicides)>(), "suicides", offsetof(vmt_descent3_struct, suicides)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, online_time)>(), "online_time", offsetof(vmt_descent3_struct, online_time)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, games_played)>(), "games_played", offsetof(vmt_descent3_struct, games_played)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, security)>(), "security", offsetof(vmt_descent3_struct, security)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, virgin_pilot)>(), "virgin_pilot", offsetof(vmt_descent3_struct, virgin_pilot)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, lateral_thrust)>(), "lateral_thrust", offsetof(vmt_descent3_struct, lateral_thrust)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, rotational_thrust)>(), "rotational_thrust", offsetof(vmt_descent3_struct, rotational_thrust)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, sliding_pct)>(), "sliding_pct", offsetof(vmt_descent3_struct, sliding_pct)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, checksum)>(), "checksum", offsetof(vmt_descent3_struct, checksum)); printf(",\n");
  details(std::type_identity<GTO(vmt_descent3_struct, pad)>(), "pad", offsetof(vmt_descent3_struct, pad));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "level_info", sizeof(level_info));
  details(std::type_identity<GTO(level_info, name)>(), "name", offsetof(level_info, name)); printf(",\n");
  details(std::type_identity<GTO(level_info, designer)>(), "designer", offsetof(level_info, designer)); printf(",\n");
  details(std::type_identity<GTO(level_info, copyright)>(), "copyright", offsetof(level_info, copyright)); printf(",\n");
  details(std::type_identity<GTO(level_info, notes)>(), "notes", offsetof(level_info, notes));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tLevelNode", sizeof(tLevelNode));
  details(std::type_identity<GTO(tLevelNode, flags)>(), "flags", offsetof(tLevelNode, flags)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, objective_flags)>(), "objective_flags", offsetof(tLevelNode, objective_flags)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, moviename)>(), "moviename", offsetof(tLevelNode, moviename)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, endmovie)>(), "endmovie", offsetof(tLevelNode, endmovie)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, filename)>(), "filename", offsetof(tLevelNode, filename)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, briefname)>(), "briefname", offsetof(tLevelNode, briefname)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, hog)>(), "hog", offsetof(tLevelNode, hog)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, score)>(), "score", offsetof(tLevelNode, score)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, progress)>(), "progress", offsetof(tLevelNode, progress)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, lvlbranch0)>(), "lvlbranch0", offsetof(tLevelNode, lvlbranch0)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, lvlbranch1)>(), "lvlbranch1", offsetof(tLevelNode, lvlbranch1)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, secretlvl)>(), "secretlvl", offsetof(tLevelNode, secretlvl)); printf(",\n");
  details(std::type_identity<GTO(tLevelNode, pad)>(), "pad", offsetof(tLevelNode, pad));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tMission", sizeof(tMission));
  details(std::type_identity<GTO(tMission, mn3_handle)>(), "mn3_handle", offsetof(tMission, mn3_handle)); printf(",\n");
  details(std::type_identity<GTO(tMission, game_state_flags)>(), "game_state_flags", offsetof(tMission, game_state_flags)); printf(",\n");
  details(std::type_identity<GTO(tMission, filename)>(), "filename", offsetof(tMission, filename)); printf(",\n");
  details(std::type_identity<GTO(tMission, name)>(), "name", offsetof(tMission, name)); printf(",\n");
  details(std::type_identity<GTO(tMission, author)>(), "author", offsetof(tMission, author)); printf(",\n");
  details(std::type_identity<GTO(tMission, desc)>(), "desc", offsetof(tMission, desc)); printf(",\n");
  details(std::type_identity<GTO(tMission, hog)>(), "hog", offsetof(tMission, hog)); printf(",\n");
  details(std::type_identity<GTO(tMission, email)>(), "email", offsetof(tMission, email)); printf(",\n");
  details(std::type_identity<GTO(tMission, web)>(), "web", offsetof(tMission, web)); printf(",\n");
  details(std::type_identity<GTO(tMission, multiplayable)>(), "multiplayable", offsetof(tMission, multiplayable)); printf(",\n");
  details(std::type_identity<GTO(tMission, singleplayable)>(), "singleplayable", offsetof(tMission, singleplayable)); printf(",\n");
  details(std::type_identity<GTO(tMission, training_mission)>(), "training_mission", offsetof(tMission, training_mission)); printf(",\n");
  details(std::type_identity<GTO(tMission, num_levels)>(), "num_levels", offsetof(tMission, num_levels)); printf(",\n");
  details(std::type_identity<GTO(tMission, cur_level)>(), "cur_level", offsetof(tMission, cur_level)); printf(",\n");
  details(std::type_identity<GTO(tMission, levels)>(), "levels", offsetof(tMission, levels));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tMissionInfo", sizeof(tMissionInfo));
  details(std::type_identity<GTO(tMissionInfo, name)>(), "name", offsetof(tMissionInfo, name)); printf(",\n");
  details(std::type_identity<GTO(tMissionInfo, author)>(), "author", offsetof(tMissionInfo, author)); printf(",\n");
  details(std::type_identity<GTO(tMissionInfo, desc)>(), "desc", offsetof(tMissionInfo, desc)); printf(",\n");
  details(std::type_identity<GTO(tMissionInfo, multi)>(), "multi", offsetof(tMissionInfo, multi)); printf(",\n");
  details(std::type_identity<GTO(tMissionInfo, single)>(), "single", offsetof(tMissionInfo, single)); printf(",\n");
  details(std::type_identity<GTO(tMissionInfo, training)>(), "training", offsetof(tMissionInfo, training)); printf(",\n");
  details(std::type_identity<GTO(tMissionInfo, n_levels)>(), "n_levels", offsetof(tMissionInfo, n_levels)); printf(",\n");
  details(std::type_identity<GTO(tMissionInfo, keywords)>(), "keywords", offsetof(tMissionInfo, keywords));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "matcen", sizeof(matcen));
  details(std::type_identity<GTO(matcen, m_name)>(), "m_name", offsetof(matcen, m_name)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_num_prod_types)>(), "m_num_prod_types", offsetof(matcen, m_num_prod_types)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_control_type)>(), "m_control_type", offsetof(matcen, m_control_type)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_type)>(), "m_type", offsetof(matcen, m_type)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_creation_effect)>(), "m_creation_effect", offsetof(matcen, m_creation_effect)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_creation_texture)>(), "m_creation_texture", offsetof(matcen, m_creation_texture)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_cur_saturation_count)>(), "m_cur_saturation_count", offsetof(matcen, m_cur_saturation_count)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_num_spawn_pnts)>(), "m_num_spawn_pnts", offsetof(matcen, m_num_spawn_pnts)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_roomnum)>(), "m_roomnum", offsetof(matcen, m_roomnum)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_objref)>(), "m_objref", offsetof(matcen, m_objref)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_create_pnt)>(), "m_create_pnt", offsetof(matcen, m_create_pnt)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_create_room)>(), "m_create_room", offsetof(matcen, m_create_room)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_spawn_pnt)>(), "m_spawn_pnt", offsetof(matcen, m_spawn_pnt)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_spawn_vec)>(), "m_spawn_vec", offsetof(matcen, m_spawn_vec)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_spawn_normal)>(), "m_spawn_normal", offsetof(matcen, m_spawn_normal)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_spawn_vis_effects)>(), "m_spawn_vis_effects", offsetof(matcen, m_spawn_vis_effects)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_max_prod)>(), "m_max_prod", offsetof(matcen, m_max_prod)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_prod_type)>(), "m_prod_type", offsetof(matcen, m_prod_type)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_prod_time)>(), "m_prod_time", offsetof(matcen, m_prod_time)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_prod_priority)>(), "m_prod_priority", offsetof(matcen, m_prod_priority)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_max_prod_type)>(), "m_max_prod_type", offsetof(matcen, m_max_prod_type)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_max_alive_children)>(), "m_max_alive_children", offsetof(matcen, m_max_alive_children)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_num_alive)>(), "m_num_alive", offsetof(matcen, m_num_alive)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_alive_list)>(), "m_alive_list", offsetof(matcen, m_alive_list)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_preprod_time)>(), "m_preprod_time", offsetof(matcen, m_preprod_time)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_postprod_time)>(), "m_postprod_time", offsetof(matcen, m_postprod_time)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_sounds)>(), "m_sounds", offsetof(matcen, m_sounds)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_speed_multi)>(), "m_speed_multi", offsetof(matcen, m_speed_multi)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_prod_mode)>(), "m_prod_mode", offsetof(matcen, m_prod_mode)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_prod_mode_time)>(), "m_prod_mode_time", offsetof(matcen, m_prod_mode_time)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_status)>(), "m_status", offsetof(matcen, m_status)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_num_prod)>(), "m_num_prod", offsetof(matcen, m_num_prod)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_last_prod_type_index)>(), "m_last_prod_type_index", offsetof(matcen, m_last_prod_type_index)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_last_prod_finish_time)>(), "m_last_prod_finish_time", offsetof(matcen, m_last_prod_finish_time)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_cached_prod_index)>(), "m_cached_prod_index", offsetof(matcen, m_cached_prod_index)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_cached_prod_time)>(), "m_cached_prod_time", offsetof(matcen, m_cached_prod_time)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_sound_active_handle)>(), "m_sound_active_handle", offsetof(matcen, m_sound_active_handle)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_next_active_check_time)>(), "m_next_active_check_time", offsetof(matcen, m_next_active_check_time)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_last_active_check_result)>(), "m_last_active_check_result", offsetof(matcen, m_last_active_check_result)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_last_prod_objref)>(), "m_last_prod_objref", offsetof(matcen, m_last_prod_objref)); printf(",\n");
  details(std::type_identity<GTO(matcen, m_num_prod_type)>(), "m_num_prod_type", offsetof(matcen, m_num_prod_type));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "lightmap_info", sizeof(lightmap_info));
  details(std::type_identity<GTO(lightmap_info, xspacing)>(), "xspacing", offsetof(lightmap_info, xspacing)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, yspacing)>(), "yspacing", offsetof(lightmap_info, yspacing)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, lm_handle)>(), "lm_handle", offsetof(lightmap_info, lm_handle)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, upper_left)>(), "upper_left", offsetof(lightmap_info, upper_left)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, normal)>(), "normal", offsetof(lightmap_info, normal)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, width)>(), "width", offsetof(lightmap_info, width)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, height)>(), "height", offsetof(lightmap_info, height)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, x1)>(), "x1", offsetof(lightmap_info, x1)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, y1)>(), "y1", offsetof(lightmap_info, y1)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, used)>(), "used", offsetof(lightmap_info, used)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, dynamic)>(), "dynamic", offsetof(lightmap_info, dynamic)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, spec_map)>(), "spec_map", offsetof(lightmap_info, spec_map)); printf(",\n");
  details(std::type_identity<GTO(lightmap_info, type)>(), "type", offsetof(lightmap_info, type));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "dynamic_lightmap", sizeof(dynamic_lightmap));
  details(std::type_identity<GTO(dynamic_lightmap, mem_ptr)>(), "mem_ptr", offsetof(dynamic_lightmap, mem_ptr)); printf(",\n");
  details(std::type_identity<GTO(dynamic_lightmap, used)>(), "used", offsetof(dynamic_lightmap, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "dynamic_face", sizeof(dynamic_face));
  details(std::type_identity<GTO(dynamic_face, lmi_handle)>(), "lmi_handle", offsetof(dynamic_face, lmi_handle));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "dynamic_cell", sizeof(dynamic_cell));
  details(std::type_identity<GTO(dynamic_cell, cellnum)>(), "cellnum", offsetof(dynamic_cell, cellnum)); printf(",\n");
  details(std::type_identity<GTO(dynamic_cell, r)>(), "r", offsetof(dynamic_cell, r)); printf(",\n");
  details(std::type_identity<GTO(dynamic_cell, g)>(), "g", offsetof(dynamic_cell, g)); printf(",\n");
  details(std::type_identity<GTO(dynamic_cell, b)>(), "b", offsetof(dynamic_cell, b));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tInvenList", sizeof(tInvenList));
  details(std::type_identity<GTO(tInvenList, selectable)>(), "selectable", offsetof(tInvenList, selectable)); printf(",\n");
  details(std::type_identity<GTO(tInvenList, hud_name)>(), "hud_name", offsetof(tInvenList, hud_name)); printf(",\n");
  details(std::type_identity<GTO(tInvenList, amount)>(), "amount", offsetof(tInvenList, amount));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tInvenInfo", sizeof(tInvenInfo));
  details(std::type_identity<GTO(tInvenInfo, count)>(), "count", offsetof(tInvenInfo, count)); printf(",\n");
  details(std::type_identity<GTO(tInvenInfo, description)>(), "description", offsetof(tInvenInfo, description)); printf(",\n");
  details(std::type_identity<GTO(tInvenInfo, icon_name)>(), "icon_name", offsetof(tInvenInfo, icon_name)); printf(",\n");
  details(std::type_identity<GTO(tInvenInfo, name)>(), "name", offsetof(tInvenInfo, name)); printf(",\n");
  details(std::type_identity<GTO(tInvenInfo, flags)>(), "flags", offsetof(tInvenInfo, flags)); printf(",\n");
  details(std::type_identity<GTO(tInvenInfo, iflags)>(), "iflags", offsetof(tInvenInfo, iflags)); printf(",\n");
  details(std::type_identity<GTO(tInvenInfo, type)>(), "type", offsetof(tInvenInfo, type)); printf(",\n");
  details(std::type_identity<GTO(tInvenInfo, id)>(), "id", offsetof(tInvenInfo, id));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "inven_item", sizeof(inven_item));
  details(std::type_identity<GTO(inven_item, type)>(), "type", offsetof(inven_item, type)); printf(",\n");
  details(std::type_identity<GTO(inven_item, otype)>(), "otype", offsetof(inven_item, otype)); printf(",\n");
  details(std::type_identity<GTO(inven_item, id)>(), "id", offsetof(inven_item, id)); printf(",\n");
  details(std::type_identity<GTO(inven_item, oid)>(), "oid", offsetof(inven_item, oid)); printf(",\n");
  details(std::type_identity<GTO(inven_item, flags)>(), "flags", offsetof(inven_item, flags)); printf(",\n");
  details(std::type_identity<GTO(inven_item, pad2)>(), "pad2", offsetof(inven_item, pad2)); printf(",\n");
  details(std::type_identity<GTO(inven_item, count)>(), "count", offsetof(inven_item, count)); printf(",\n");
  details(std::type_identity<GTO(inven_item, description)>(), "description", offsetof(inven_item, description)); printf(",\n");
  details(std::type_identity<GTO(inven_item, icon_name)>(), "icon_name", offsetof(inven_item, icon_name)); printf(",\n");
  details(std::type_identity<GTO(inven_item, name)>(), "name", offsetof(inven_item, name)); printf(",\n");
  details(std::type_identity<GTO(inven_item, iflags)>(), "iflags", offsetof(inven_item, iflags)); printf(",\n");
  details(std::type_identity<GTO(inven_item, next)>(), "next", offsetof(inven_item, next)); printf(",\n");
  details(std::type_identity<GTO(inven_item, prev)>(), "prev", offsetof(inven_item, prev));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "Inventory", sizeof(Inventory));
  details(std::type_identity<GTO(Inventory, root)>(), "root", offsetof(Inventory, root)); printf(",\n");
  details(std::type_identity<GTO(Inventory, count)>(), "count", offsetof(Inventory, count)); printf(",\n");
  details(std::type_identity<GTO(Inventory, pos)>(), "pos", offsetof(Inventory, pos));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tHUDItem", sizeof(tHUDItem));
  details(std::type_identity<GTO(tHUDItem, x)>(), "x", offsetof(tHUDItem, x)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, y)>(), "y", offsetof(tHUDItem, y)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, xa)>(), "xa", offsetof(tHUDItem, xa)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, ya)>(), "ya", offsetof(tHUDItem, ya)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, xb)>(), "xb", offsetof(tHUDItem, xb)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, yb)>(), "yb", offsetof(tHUDItem, yb)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, tx)>(), "tx", offsetof(tHUDItem, tx)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, ty)>(), "ty", offsetof(tHUDItem, ty)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, grscalex)>(), "grscalex", offsetof(tHUDItem, grscalex)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, grscaley)>(), "grscaley", offsetof(tHUDItem, grscaley)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, id)>(), "id", offsetof(tHUDItem, id)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, type)>(), "type", offsetof(tHUDItem, type)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, stat)>(), "stat", offsetof(tHUDItem, stat)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, flags)>(), "flags", offsetof(tHUDItem, flags)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, alpha)>(), "alpha", offsetof(tHUDItem, alpha)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, saturation_count)>(), "saturation_count", offsetof(tHUDItem, saturation_count)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, color)>(), "color", offsetof(tHUDItem, color)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, tcolor)>(), "tcolor", offsetof(tHUDItem, tcolor)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, render_fn)>(), "render_fn", offsetof(tHUDItem, render_fn)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, buffer_size)>(), "buffer_size", offsetof(tHUDItem, buffer_size)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, data)>(), "data", offsetof(tHUDItem, data)); printf(",\n");
//  details(std::type_identity<GTO(tHUDItem, data.bm_handle)>(), "data.bm_handle", offsetof(tHUDItem, data.bm_handle)); printf(",\n");
//  details(std::type_identity<GTO(tHUDItem, data.timer_handle)>(), "data.timer_handle", offsetof(tHUDItem, data.timer_handle)); printf(",\n");
//  details(std::type_identity<GTO(tHUDItem, data.text)>(), "data.text", offsetof(tHUDItem, data.text)); printf(",\n");
  details(std::type_identity<GTO(tHUDItem, dirty_rect)>(), "dirty_rect", offsetof(tHUDItem, dirty_rect));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "sHUDResources", sizeof(sHUDResources));
  details(std::type_identity<GTO(sHUDResources, hud_inf_name)>(), "hud_inf_name", offsetof(sHUDResources, hud_inf_name)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, arrow_bmp)>(), "arrow_bmp", offsetof(sHUDResources, arrow_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, goal_complete_bmp)>(), "goal_complete_bmp", offsetof(sHUDResources, goal_complete_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, goal_bmp)>(), "goal_bmp", offsetof(sHUDResources, goal_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, lock_bmp)>(), "lock_bmp", offsetof(sHUDResources, lock_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, wpn_bmp)>(), "wpn_bmp", offsetof(sHUDResources, wpn_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, ship_bmp)>(), "ship_bmp", offsetof(sHUDResources, ship_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, energy_bmp)>(), "energy_bmp", offsetof(sHUDResources, energy_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, shield_bmp)>(), "shield_bmp", offsetof(sHUDResources, shield_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, invpulse_bmp)>(), "invpulse_bmp", offsetof(sHUDResources, invpulse_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, dot_bmp)>(), "dot_bmp", offsetof(sHUDResources, dot_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, afterburn_bmp)>(), "afterburn_bmp", offsetof(sHUDResources, afterburn_bmp)); printf(",\n");
  details(std::type_identity<GTO(sHUDResources, antigrav_bmp)>(), "antigrav_bmp", offsetof(sHUDResources, antigrav_bmp));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "scanline", sizeof(scanline));
  details(std::type_identity<GTO(scanline, start)>(), "start", offsetof(scanline, start)); printf(",\n");
  details(std::type_identity<GTO(scanline, end)>(), "end", offsetof(scanline, end));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "hotspot", sizeof(hotspot));
  details(std::type_identity<GTO(hotspot, starting_y)>(), "starting_y", offsetof(hotspot, starting_y)); printf(",\n");
  details(std::type_identity<GTO(hotspot, scanlines)>(), "scanlines", offsetof(hotspot, scanlines)); printf(",\n");
  details(std::type_identity<GTO(hotspot, x)>(), "x", offsetof(hotspot, x));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "hotspotmap_t", sizeof(hotspotmap_t));
  details(std::type_identity<GTO(hotspotmap_t, num_of_hotspots)>(), "num_of_hotspots", offsetof(hotspotmap_t, num_of_hotspots)); printf(",\n");
  details(std::type_identity<GTO(hotspotmap_t, hs)>(), "hs", offsetof(hotspotmap_t, hs));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "window_box", sizeof(window_box));
  details(std::type_identity<GTO(window_box, x)>(), "x", offsetof(window_box, x)); printf(",\n");
  details(std::type_identity<GTO(window_box, y)>(), "y", offsetof(window_box, y)); printf(",\n");
  details(std::type_identity<GTO(window_box, width)>(), "width", offsetof(window_box, width)); printf(",\n");
  details(std::type_identity<GTO(window_box, height)>(), "height", offsetof(window_box, height)); printf(",\n");
  details(std::type_identity<GTO(window_box, l_start_x)>(), "l_start_x", offsetof(window_box, l_start_x)); printf(",\n");
  details(std::type_identity<GTO(window_box, l_end_x)>(), "l_end_x", offsetof(window_box, l_end_x)); printf(",\n");
  details(std::type_identity<GTO(window_box, r_start_x)>(), "r_start_x", offsetof(window_box, r_start_x)); printf(",\n");
  details(std::type_identity<GTO(window_box, r_end_x)>(), "r_end_x", offsetof(window_box, r_end_x)); printf(",\n");
  details(std::type_identity<GTO(window_box, t_top_y)>(), "t_top_y", offsetof(window_box, t_top_y)); printf(",\n");
  details(std::type_identity<GTO(window_box, t_bottom_y)>(), "t_bottom_y", offsetof(window_box, t_bottom_y)); printf(",\n");
  details(std::type_identity<GTO(window_box, b_top_y)>(), "b_top_y", offsetof(window_box, b_top_y)); printf(",\n");
  details(std::type_identity<GTO(window_box, b_bottom_y)>(), "b_bottom_y", offsetof(window_box, b_bottom_y)); printf(",\n");
  details(std::type_identity<GTO(window_box, on_left)>(), "on_left", offsetof(window_box, on_left)); printf(",\n");
  details(std::type_identity<GTO(window_box, on_top)>(), "on_top", offsetof(window_box, on_top)); printf(",\n");
  details(std::type_identity<GTO(window_box, lt)>(), "lt", offsetof(window_box, lt)); printf(",\n");
  details(std::type_identity<GTO(window_box, rt)>(), "rt", offsetof(window_box, rt)); printf(",\n");
  details(std::type_identity<GTO(window_box, lb)>(), "lb", offsetof(window_box, lb)); printf(",\n");
  details(std::type_identity<GTO(window_box, rb)>(), "rb", offsetof(window_box, rb)); printf(",\n");
  details(std::type_identity<GTO(window_box, lt_bmp)>(), "lt_bmp", offsetof(window_box, lt_bmp)); printf(",\n");
  details(std::type_identity<GTO(window_box, rt_bmp)>(), "rt_bmp", offsetof(window_box, rt_bmp)); printf(",\n");
  details(std::type_identity<GTO(window_box, lb_bmp)>(), "lb_bmp", offsetof(window_box, lb_bmp)); printf(",\n");
  details(std::type_identity<GTO(window_box, rb_bmp)>(), "rb_bmp", offsetof(window_box, rb_bmp));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "windowmap_t", sizeof(windowmap_t));
  details(std::type_identity<GTO(windowmap_t, num_of_windows)>(), "num_of_windows", offsetof(windowmap_t, num_of_windows)); printf(",\n");
  details(std::type_identity<GTO(windowmap_t, wm)>(), "wm", offsetof(windowmap_t, wm));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "static_proc_element", sizeof(static_proc_element));
  details(std::type_identity<GTO(static_proc_element, type)>(), "type", offsetof(static_proc_element, type)); printf(",\n");
  details(std::type_identity<GTO(static_proc_element, frequency)>(), "frequency", offsetof(static_proc_element, frequency)); printf(",\n");
  details(std::type_identity<GTO(static_proc_element, speed)>(), "speed", offsetof(static_proc_element, speed)); printf(",\n");
  details(std::type_identity<GTO(static_proc_element, color)>(), "color", offsetof(static_proc_element, color)); printf(",\n");
  details(std::type_identity<GTO(static_proc_element, size)>(), "size", offsetof(static_proc_element, size)); printf(",\n");
  details(std::type_identity<GTO(static_proc_element, x1)>(), "x1", offsetof(static_proc_element, x1)); printf(",\n");
  details(std::type_identity<GTO(static_proc_element, y1)>(), "y1", offsetof(static_proc_element, y1)); printf(",\n");
  details(std::type_identity<GTO(static_proc_element, x2)>(), "x2", offsetof(static_proc_element, x2)); printf(",\n");
  details(std::type_identity<GTO(static_proc_element, y2)>(), "y2", offsetof(static_proc_element, y2));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "proc_struct", sizeof(proc_struct));
  details(std::type_identity<GTO(proc_struct, dynamic_proc_elements)>(), "dynamic_proc_elements", offsetof(proc_struct, dynamic_proc_elements)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, proc1)>(), "proc1", offsetof(proc_struct, proc1)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, proc2)>(), "proc2", offsetof(proc_struct, proc2)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, procedural_bitmap)>(), "procedural_bitmap", offsetof(proc_struct, procedural_bitmap)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, palette)>(), "palette", offsetof(proc_struct, palette)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, static_proc_elements)>(), "static_proc_elements", offsetof(proc_struct, static_proc_elements)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, num_static_elements)>(), "num_static_elements", offsetof(proc_struct, num_static_elements)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, memory_type)>(), "memory_type", offsetof(proc_struct, memory_type)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, heat)>(), "heat", offsetof(proc_struct, heat)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, thickness)>(), "thickness", offsetof(proc_struct, thickness)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, light)>(), "light", offsetof(proc_struct, light)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, last_evaluation_time)>(), "last_evaluation_time", offsetof(proc_struct, last_evaluation_time)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, evaluation_time)>(), "evaluation_time", offsetof(proc_struct, evaluation_time)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, osc_time)>(), "osc_time", offsetof(proc_struct, osc_time)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, osc_value)>(), "osc_value", offsetof(proc_struct, osc_value)); printf(",\n");
  details(std::type_identity<GTO(proc_struct, last_procedural_frame)>(), "last_procedural_frame", offsetof(proc_struct, last_procedural_frame));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "texture", sizeof(texture));
  details(std::type_identity<GTO(texture, name)>(), "name", offsetof(texture, name)); printf(",\n");
  details(std::type_identity<GTO(texture, flags)>(), "flags", offsetof(texture, flags)); printf(",\n");
  details(std::type_identity<GTO(texture, bm_handle)>(), "bm_handle", offsetof(texture, bm_handle)); printf(",\n");
  details(std::type_identity<GTO(texture, destroy_handle)>(), "destroy_handle", offsetof(texture, destroy_handle)); printf(",\n");
  details(std::type_identity<GTO(texture, damage)>(), "damage", offsetof(texture, damage)); printf(",\n");
  details(std::type_identity<GTO(texture, reflectivity)>(), "reflectivity", offsetof(texture, reflectivity)); printf(",\n");
  details(std::type_identity<GTO(texture, r)>(), "r", offsetof(texture, r)); printf(",\n");
  details(std::type_identity<GTO(texture, g)>(), "g", offsetof(texture, g)); printf(",\n");
  details(std::type_identity<GTO(texture, b)>(), "b", offsetof(texture, b)); printf(",\n");
  details(std::type_identity<GTO(texture, slide_u)>(), "slide_u", offsetof(texture, slide_u)); printf(",\n");
  details(std::type_identity<GTO(texture, slide_v)>(), "slide_v", offsetof(texture, slide_v)); printf(",\n");
  details(std::type_identity<GTO(texture, alpha)>(), "alpha", offsetof(texture, alpha)); printf(",\n");
  details(std::type_identity<GTO(texture, speed)>(), "speed", offsetof(texture, speed)); printf(",\n");
  details(std::type_identity<GTO(texture, procedural)>(), "procedural", offsetof(texture, procedural)); printf(",\n");
  details(std::type_identity<GTO(texture, sound)>(), "sound", offsetof(texture, sound)); printf(",\n");
  details(std::type_identity<GTO(texture, sound_volume)>(), "sound_volume", offsetof(texture, sound_volume)); printf(",\n");
  details(std::type_identity<GTO(texture, bumpmap)>(), "bumpmap", offsetof(texture, bumpmap)); printf(",\n");
  details(std::type_identity<GTO(texture, corona_type)>(), "corona_type", offsetof(texture, corona_type)); printf(",\n");
  details(std::type_identity<GTO(texture, used)>(), "used", offsetof(texture, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "node", sizeof(node));
  details(std::type_identity<GTO(node, pos)>(), "pos", offsetof(node, pos)); printf(",\n");
  details(std::type_identity<GTO(node, roomnum)>(), "roomnum", offsetof(node, roomnum)); printf(",\n");
  details(std::type_identity<GTO(node, flags)>(), "flags", offsetof(node, flags)); printf(",\n");
  details(std::type_identity<GTO(node, fvec)>(), "fvec", offsetof(node, fvec)); printf(",\n");
  details(std::type_identity<GTO(node, uvec)>(), "uvec", offsetof(node, uvec));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "game_path", sizeof(game_path));
  details(std::type_identity<GTO(game_path, pathnodes)>(), "pathnodes", offsetof(game_path, pathnodes)); printf(",\n");
  details(std::type_identity<GTO(game_path, num_nodes)>(), "num_nodes", offsetof(game_path, num_nodes)); printf(",\n");
  details(std::type_identity<GTO(game_path, name)>(), "name", offsetof(game_path, name)); printf(",\n");
  details(std::type_identity<GTO(game_path, flags)>(), "flags", offsetof(game_path, flags)); printf(",\n");
  details(std::type_identity<GTO(game_path, used)>(), "used", offsetof(game_path, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "game_event", sizeof(game_event));
  details(std::type_identity<GTO(game_event, type)>(), "type", offsetof(game_event, type)); printf(",\n");
  details(std::type_identity<GTO(game_event, id)>(), "id", offsetof(game_event, id)); printf(",\n");
  details(std::type_identity<GTO(game_event, objhandle_detonator)>(), "objhandle_detonator", offsetof(game_event, objhandle_detonator)); printf(",\n");
  details(std::type_identity<GTO(game_event, used)>(), "used", offsetof(game_event, used)); printf(",\n");
  details(std::type_identity<GTO(game_event, start_time)>(), "start_time", offsetof(game_event, start_time)); printf(",\n");
  details(std::type_identity<GTO(game_event, end_time)>(), "end_time", offsetof(game_event, end_time)); printf(",\n");
  details(std::type_identity<GTO(game_event, frame_born)>(), "frame_born", offsetof(game_event, frame_born)); printf(",\n");
  details(std::type_identity<GTO(game_event, data)>(), "data", offsetof(game_event, data)); printf(",\n");
  details(std::type_identity<GTO(game_event, subfunction)>(), "subfunction", offsetof(game_event, subfunction));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tCannedCinematicInfo", sizeof(tCannedCinematicInfo));
  details(std::type_identity<GTO(tCannedCinematicInfo, type)>(), "type", offsetof(tCannedCinematicInfo, type)); printf(",\n");
  details(std::type_identity<GTO(tCannedCinematicInfo, camera_pathid)>(), "camera_pathid", offsetof(tCannedCinematicInfo, camera_pathid)); printf(",\n");
  details(std::type_identity<GTO(tCannedCinematicInfo, target_pathid)>(), "target_pathid", offsetof(tCannedCinematicInfo, target_pathid)); printf(",\n");
  details(std::type_identity<GTO(tCannedCinematicInfo, text_to_display)>(), "text_to_display", offsetof(tCannedCinematicInfo, text_to_display)); printf(",\n");
  details(std::type_identity<GTO(tCannedCinematicInfo, target_objhandle)>(), "target_objhandle", offsetof(tCannedCinematicInfo, target_objhandle)); printf(",\n");
  details(std::type_identity<GTO(tCannedCinematicInfo, room)>(), "room", offsetof(tCannedCinematicInfo, room)); printf(",\n");
  details(std::type_identity<GTO(tCannedCinematicInfo, time)>(), "time", offsetof(tCannedCinematicInfo, time)); printf(",\n");
  details(std::type_identity<GTO(tCannedCinematicInfo, object_to_use_for_point)>(), "object_to_use_for_point", offsetof(tCannedCinematicInfo, object_to_use_for_point)); printf(",\n");
  details(std::type_identity<GTO(tCannedCinematicInfo, pos)>(), "pos", offsetof(tCannedCinematicInfo, pos)); printf(",\n");
  details(std::type_identity<GTO(tCannedCinematicInfo, orient)>(), "orient", offsetof(tCannedCinematicInfo, orient));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "PercentageRange", sizeof(PercentageRange));
  details(std::type_identity<GTO(PercentageRange, min)>(), "min", offsetof(PercentageRange, min)); printf(",\n");
  details(std::type_identity<GTO(PercentageRange, max)>(), "max", offsetof(PercentageRange, max));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tGameCinematic", sizeof(tGameCinematic));
  details(std::type_identity<GTO(tGameCinematic, flags)>(), "flags", offsetof(tGameCinematic, flags)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, target_objhandle)>(), "target_objhandle", offsetof(tGameCinematic, target_objhandle)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, end_transition)>(), "end_transition", offsetof(tGameCinematic, end_transition)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, start_transition)>(), "start_transition", offsetof(tGameCinematic, start_transition)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, pathid)>(), "pathid", offsetof(tGameCinematic, pathid)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, position)>(), "position", offsetof(tGameCinematic, position)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, orient)>(), "orient", offsetof(tGameCinematic, orient)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, room)>(), "room", offsetof(tGameCinematic, room)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, max_time_play)>(), "max_time_play", offsetof(tGameCinematic, max_time_play)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, callback)>(), "callback", offsetof(tGameCinematic, callback)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, text_display)>(), "text_display", offsetof(tGameCinematic, text_display)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, track_target)>(), "track_target", offsetof(tGameCinematic, track_target)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, player_disabled)>(), "player_disabled", offsetof(tGameCinematic, player_disabled)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, in_camera_view)>(), "in_camera_view", offsetof(tGameCinematic, in_camera_view)); printf(",\n");
  details(std::type_identity<GTO(tGameCinematic, quick_exit)>(), "quick_exit", offsetof(tGameCinematic, quick_exit));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "fireball", sizeof(fireball));
  details(std::type_identity<GTO(fireball, name)>(), "name", offsetof(fireball, name)); printf(",\n");
  details(std::type_identity<GTO(fireball, type)>(), "type", offsetof(fireball, type)); printf(",\n");
  details(std::type_identity<GTO(fireball, tex_size)>(), "tex_size", offsetof(fireball, tex_size)); printf(",\n");
  details(std::type_identity<GTO(fireball, total_life)>(), "total_life", offsetof(fireball, total_life)); printf(",\n");
  details(std::type_identity<GTO(fireball, size)>(), "size", offsetof(fireball, size)); printf(",\n");
  details(std::type_identity<GTO(fireball, bm_handle)>(), "bm_handle", offsetof(fireball, bm_handle));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "door", sizeof(door));
  details(std::type_identity<GTO(door, name)>(), "name", offsetof(door, name)); printf(",\n");
  details(std::type_identity<GTO(door, used)>(), "used", offsetof(door, used)); printf(",\n");
  details(std::type_identity<GTO(door, flags)>(), "flags", offsetof(door, flags)); printf(",\n");
  details(std::type_identity<GTO(door, pad)>(), "pad", offsetof(door, pad)); printf(",\n");
  details(std::type_identity<GTO(door, hit_points)>(), "hit_points", offsetof(door, hit_points)); printf(",\n");
  details(std::type_identity<GTO(door, total_open_time)>(), "total_open_time", offsetof(door, total_open_time)); printf(",\n");
  details(std::type_identity<GTO(door, total_close_time)>(), "total_close_time", offsetof(door, total_close_time)); printf(",\n");
  details(std::type_identity<GTO(door, total_time_open)>(), "total_time_open", offsetof(door, total_time_open)); printf(",\n");
  details(std::type_identity<GTO(door, model_handle)>(), "model_handle", offsetof(door, model_handle)); printf(",\n");
  details(std::type_identity<GTO(door, open_sound)>(), "open_sound", offsetof(door, open_sound)); printf(",\n");
  details(std::type_identity<GTO(door, close_sound)>(), "close_sound", offsetof(door, close_sound)); printf(",\n");
  details(std::type_identity<GTO(door, module_name)>(), "module_name", offsetof(door, module_name));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "bspplane", sizeof(bspplane));
  details(std::type_identity<GTO(bspplane, a)>(), "a", offsetof(bspplane, a)); printf(",\n");
  details(std::type_identity<GTO(bspplane, b)>(), "b", offsetof(bspplane, b)); printf(",\n");
  details(std::type_identity<GTO(bspplane, c)>(), "c", offsetof(bspplane, c)); printf(",\n");
  details(std::type_identity<GTO(bspplane, d)>(), "d", offsetof(bspplane, d)); printf(",\n");
  details(std::type_identity<GTO(bspplane, used)>(), "used", offsetof(bspplane, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "bsppolygon", sizeof(bsppolygon));
  details(std::type_identity<GTO(bsppolygon, verts)>(), "verts", offsetof(bsppolygon, verts)); printf(",\n");
  details(std::type_identity<GTO(bsppolygon, nv)>(), "nv", offsetof(bsppolygon, nv)); printf(",\n");
  details(std::type_identity<GTO(bsppolygon, plane)>(), "plane", offsetof(bsppolygon, plane)); printf(",\n");
  details(std::type_identity<GTO(bsppolygon, roomnum)>(), "roomnum", offsetof(bsppolygon, roomnum)); printf(",\n");
  details(std::type_identity<GTO(bsppolygon, facenum)>(), "facenum", offsetof(bsppolygon, facenum)); printf(",\n");
  details(std::type_identity<GTO(bsppolygon, subnum)>(), "subnum", offsetof(bsppolygon, subnum)); printf(",\n");
  details(std::type_identity<GTO(bsppolygon, color)>(), "color", offsetof(bsppolygon, color));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "bspnode", sizeof(bspnode));
  details(std::type_identity<GTO(bspnode, type)>(), "type", offsetof(bspnode, type)); printf(",\n");
  details(std::type_identity<GTO(bspnode, plane)>(), "plane", offsetof(bspnode, plane)); printf(",\n");
  details(std::type_identity<GTO(bspnode, node_facenum)>(), "node_facenum", offsetof(bspnode, node_facenum)); printf(",\n");
  details(std::type_identity<GTO(bspnode, node_roomnum)>(), "node_roomnum", offsetof(bspnode, node_roomnum)); printf(",\n");
  details(std::type_identity<GTO(bspnode, node_subnum)>(), "node_subnum", offsetof(bspnode, node_subnum)); printf(",\n");
  details(std::type_identity<GTO(bspnode, front)>(), "front", offsetof(bspnode, front)); printf(",\n");
  details(std::type_identity<GTO(bspnode, back)>(), "back", offsetof(bspnode, back)); printf(",\n");
  details(std::type_identity<GTO(bspnode, polylist)>(), "polylist", offsetof(bspnode, polylist)); printf(",\n");
  details(std::type_identity<GTO(bspnode, num_polys)>(), "num_polys", offsetof(bspnode, num_polys));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "bsptree", sizeof(bsptree));
  details(std::type_identity<GTO(bsptree, vertlist)>(), "vertlist", offsetof(bsptree, vertlist)); printf(",\n");
  details(std::type_identity<GTO(bsptree, polylist)>(), "polylist", offsetof(bsptree, polylist)); printf(",\n");
  details(std::type_identity<GTO(bsptree, root)>(), "root", offsetof(bsptree, root));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "bn_edge", sizeof(bn_edge));
  details(std::type_identity<GTO(bn_edge, end_room)>(), "end_room", offsetof(bn_edge, end_room)); printf(",\n");
  details(std::type_identity<GTO(bn_edge, end_index)>(), "end_index", offsetof(bn_edge, end_index)); printf(",\n");
  details(std::type_identity<GTO(bn_edge, flags)>(), "flags", offsetof(bn_edge, flags)); printf(",\n");
  details(std::type_identity<GTO(bn_edge, cost)>(), "cost", offsetof(bn_edge, cost)); printf(",\n");
  details(std::type_identity<GTO(bn_edge, max_rad)>(), "max_rad", offsetof(bn_edge, max_rad));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "bn_node", sizeof(bn_node));
  details(std::type_identity<GTO(bn_node, pos)>(), "pos", offsetof(bn_node, pos)); printf(",\n");
  details(std::type_identity<GTO(bn_node, num_edges)>(), "num_edges", offsetof(bn_node, num_edges)); printf(",\n");
  details(std::type_identity<GTO(bn_node, edges)>(), "edges", offsetof(bn_node, edges));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "bn_list", sizeof(bn_list));
  details(std::type_identity<GTO(bn_list, num_nodes)>(), "num_nodes", offsetof(bn_list, num_nodes)); printf(",\n");
  details(std::type_identity<GTO(bn_list, nodes)>(), "nodes", offsetof(bn_list, nodes));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ase", sizeof(ase));
  details(std::type_identity<GTO(ase, handle)>(), "handle", offsetof(ase, handle)); printf(",\n");
  details(std::type_identity<GTO(ase, min_volume)>(), "min_volume", offsetof(ase, min_volume)); printf(",\n");
  details(std::type_identity<GTO(ase, max_volume)>(), "max_volume", offsetof(ase, max_volume)); printf(",\n");
  details(std::type_identity<GTO(ase, probability)>(), "probability", offsetof(ase, probability));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "asp", sizeof(asp));
  details(std::type_identity<GTO(asp, name)>(), "name", offsetof(asp, name)); printf(",\n");
  details(std::type_identity<GTO(asp, min_delay)>(), "min_delay", offsetof(asp, min_delay)); printf(",\n");
  details(std::type_identity<GTO(asp, max_delay)>(), "max_delay", offsetof(asp, max_delay)); printf(",\n");
  details(std::type_identity<GTO(asp, num_sounds)>(), "num_sounds", offsetof(asp, num_sounds)); printf(",\n");
  details(std::type_identity<GTO(asp, sounds)>(), "sounds", offsetof(asp, sounds)); printf(",\n");
  details(std::type_identity<GTO(asp, delay)>(), "delay", offsetof(asp, delay));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ground_information", sizeof(ground_information));
  details(std::type_identity<GTO(ground_information, highest_y)>(), "highest_y", offsetof(ground_information, highest_y)); printf(",\n");
  details(std::type_identity<GTO(ground_information, lowest_y)>(), "lowest_y", offsetof(ground_information, lowest_y));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "ambient_life", sizeof(ambient_life));
  details(std::type_identity<GTO(ambient_life, m_type)>(), "m_type", offsetof(ambient_life, m_type)); printf(",\n");
  details(std::type_identity<GTO(ambient_life, m_total)>(), "m_total", offsetof(ambient_life, m_total)); printf(",\n");
  details(std::type_identity<GTO(ambient_life, m_max)>(), "m_max", offsetof(ambient_life, m_max)); printf(",\n");
  details(std::type_identity<GTO(ambient_life, m_min)>(), "m_min", offsetof(ambient_life, m_min)); printf(",\n");
  details(std::type_identity<GTO(ambient_life, m_flags)>(), "m_flags", offsetof(ambient_life, m_flags)); printf(",\n");
  details(std::type_identity<GTO(ambient_life, m_cur_num)>(), "m_cur_num", offsetof(ambient_life, m_cur_num)); printf(",\n");
  details(std::type_identity<GTO(ambient_life, m_handle)>(), "m_handle", offsetof(ambient_life, m_handle)); printf(",\n");
  details(std::type_identity<GTO(ambient_life, m_next_size)>(), "m_next_size", offsetof(ambient_life, m_next_size)); printf(",\n");
  details(std::type_identity<GTO(ambient_life, m_next_do_time)>(), "m_next_do_time", offsetof(ambient_life, m_next_do_time));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "light_info", sizeof(light_info));
  details(std::type_identity<GTO(light_info, flags)>(), "flags", offsetof(light_info, flags)); printf(",\n");
  details(std::type_identity<GTO(light_info, light_distance)>(), "light_distance", offsetof(light_info, light_distance)); printf(",\n");
  details(std::type_identity<GTO(light_info, red_light1)>(), "red_light1", offsetof(light_info, red_light1)); printf(",\n");
  details(std::type_identity<GTO(light_info, green_light1)>(), "green_light1", offsetof(light_info, green_light1)); printf(",\n");
  details(std::type_identity<GTO(light_info, blue_light1)>(), "blue_light1", offsetof(light_info, blue_light1)); printf(",\n");
  details(std::type_identity<GTO(light_info, red_light2)>(), "red_light2", offsetof(light_info, red_light2)); printf(",\n");
  details(std::type_identity<GTO(light_info, green_light2)>(), "green_light2", offsetof(light_info, green_light2)); printf(",\n");
  details(std::type_identity<GTO(light_info, blue_light2)>(), "blue_light2", offsetof(light_info, blue_light2)); printf(",\n");
  details(std::type_identity<GTO(light_info, time_interval)>(), "time_interval", offsetof(light_info, time_interval)); printf(",\n");
  details(std::type_identity<GTO(light_info, flicker_distance)>(), "flicker_distance", offsetof(light_info, flicker_distance)); printf(",\n");
  details(std::type_identity<GTO(light_info, directional_dot)>(), "directional_dot", offsetof(light_info, directional_dot)); printf(",\n");
  details(std::type_identity<GTO(light_info, timebits)>(), "timebits", offsetof(light_info, timebits)); printf(",\n");
  details(std::type_identity<GTO(light_info, angle)>(), "angle", offsetof(light_info, angle)); printf(",\n");
  details(std::type_identity<GTO(light_info, lighting_render_type)>(), "lighting_render_type", offsetof(light_info, lighting_render_type));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "effect_info_s", sizeof(effect_info_s));
  details(std::type_identity<GTO(effect_info_s, type_flags)>(), "type_flags", offsetof(effect_info_s, type_flags)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, alpha)>(), "alpha", offsetof(effect_info_s, alpha)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, deform_range)>(), "deform_range", offsetof(effect_info_s, deform_range)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, cloak_time)>(), "cloak_time", offsetof(effect_info_s, cloak_time)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, deform_time)>(), "deform_time", offsetof(effect_info_s, deform_time)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, color_time)>(), "color_time", offsetof(effect_info_s, color_time)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, r)>(), "r", offsetof(effect_info_s, r)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, g)>(), "g", offsetof(effect_info_s, g)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, b)>(), "b", offsetof(effect_info_s, b)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, fade_time)>(), "fade_time", offsetof(effect_info_s, fade_time)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, fade_max_time)>(), "fade_max_time", offsetof(effect_info_s, fade_max_time)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, damage_time)>(), "damage_time", offsetof(effect_info_s, damage_time)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, damage_per_second)>(), "damage_per_second", offsetof(effect_info_s, damage_per_second)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, last_damage_time)>(), "last_damage_time", offsetof(effect_info_s, last_damage_time)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, damage_handle)>(), "damage_handle", offsetof(effect_info_s, damage_handle)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, volume_change_time)>(), "volume_change_time", offsetof(effect_info_s, volume_change_time)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, volume_old_pos)>(), "volume_old_pos", offsetof(effect_info_s, volume_old_pos)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, volume_old_room)>(), "volume_old_room", offsetof(effect_info_s, volume_old_room)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, last_object_hit_time)>(), "last_object_hit_time", offsetof(effect_info_s, last_object_hit_time)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, last_object_hit)>(), "last_object_hit", offsetof(effect_info_s, last_object_hit)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, spec_pos)>(), "spec_pos", offsetof(effect_info_s, spec_pos)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, spec_mag)>(), "spec_mag", offsetof(effect_info_s, spec_mag)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, spec_r)>(), "spec_r", offsetof(effect_info_s, spec_r)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, spec_g)>(), "spec_g", offsetof(effect_info_s, spec_g)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, spec_b)>(), "spec_b", offsetof(effect_info_s, spec_b)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, dynamic_this_frame)>(), "dynamic_this_frame", offsetof(effect_info_s, dynamic_this_frame)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, dynamic_red)>(), "dynamic_red", offsetof(effect_info_s, dynamic_red)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, dynamic_green)>(), "dynamic_green", offsetof(effect_info_s, dynamic_green)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, dynamic_blue)>(), "dynamic_blue", offsetof(effect_info_s, dynamic_blue)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, liquid_time_left)>(), "liquid_time_left", offsetof(effect_info_s, liquid_time_left)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, liquid_mag)>(), "liquid_mag", offsetof(effect_info_s, liquid_mag)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, freeze_scalar)>(), "freeze_scalar", offsetof(effect_info_s, freeze_scalar)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, attach_line_handle)>(), "attach_line_handle", offsetof(effect_info_s, attach_line_handle)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, sound_handle)>(), "sound_handle", offsetof(effect_info_s, sound_handle)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, spark_delay)>(), "spark_delay", offsetof(effect_info_s, spark_delay)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, spark_timer)>(), "spark_timer", offsetof(effect_info_s, spark_timer)); printf(",\n");
  details(std::type_identity<GTO(effect_info_s, spark_time_left)>(), "spark_time_left", offsetof(effect_info_s, spark_time_left));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "custom_anim", sizeof(custom_anim));
  details(std::type_identity<GTO(custom_anim, server_time)>(), "server_time", offsetof(custom_anim, server_time)); printf(",\n");
  details(std::type_identity<GTO(custom_anim, server_anim_frame)>(), "server_anim_frame", offsetof(custom_anim, server_anim_frame)); printf(",\n");
  details(std::type_identity<GTO(custom_anim, anim_start_frame)>(), "anim_start_frame", offsetof(custom_anim, anim_start_frame)); printf(",\n");
  details(std::type_identity<GTO(custom_anim, anim_end_frame)>(), "anim_end_frame", offsetof(custom_anim, anim_end_frame)); printf(",\n");
  details(std::type_identity<GTO(custom_anim, anim_time)>(), "anim_time", offsetof(custom_anim, anim_time)); printf(",\n");
  details(std::type_identity<GTO(custom_anim, max_speed)>(), "max_speed", offsetof(custom_anim, max_speed)); printf(",\n");
  details(std::type_identity<GTO(custom_anim, anim_sound_index)>(), "anim_sound_index", offsetof(custom_anim, anim_sound_index)); printf(",\n");
  details(std::type_identity<GTO(custom_anim, flags)>(), "flags", offsetof(custom_anim, flags)); printf(",\n");
  details(std::type_identity<GTO(custom_anim, next_anim_type)>(), "next_anim_type", offsetof(custom_anim, next_anim_type));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "multi_turret", sizeof(multi_turret));
  details(std::type_identity<GTO(multi_turret, time)>(), "time", offsetof(multi_turret, time)); printf(",\n");
  details(std::type_identity<GTO(multi_turret, last_time)>(), "last_time", offsetof(multi_turret, last_time)); printf(",\n");
  details(std::type_identity<GTO(multi_turret, num_turrets)>(), "num_turrets", offsetof(multi_turret, num_turrets)); printf(",\n");
  details(std::type_identity<GTO(multi_turret, last_keyframes)>(), "last_keyframes", offsetof(multi_turret, last_keyframes)); printf(",\n");
  details(std::type_identity<GTO(multi_turret, keyframes)>(), "keyframes", offsetof(multi_turret, keyframes)); printf(",\n");
  details(std::type_identity<GTO(multi_turret, flags)>(), "flags", offsetof(multi_turret, flags));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "polyobj_info", sizeof(polyobj_info));
  details(std::type_identity<GTO(polyobj_info, model_num)>(), "model_num", offsetof(polyobj_info, model_num)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, dying_model_num)>(), "dying_model_num", offsetof(polyobj_info, dying_model_num)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, anim_start_frame)>(), "anim_start_frame", offsetof(polyobj_info, anim_start_frame)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, anim_frame)>(), "anim_frame", offsetof(polyobj_info, anim_frame)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, anim_end_frame)>(), "anim_end_frame", offsetof(polyobj_info, anim_end_frame)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, anim_time)>(), "anim_time", offsetof(polyobj_info, anim_time)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, anim_flags)>(), "anim_flags", offsetof(polyobj_info, anim_flags)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, max_speed)>(), "max_speed", offsetof(polyobj_info, max_speed)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, multi_anim_info)>(), "multi_anim_info", offsetof(polyobj_info, multi_anim_info)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, custom_anim_info)>(), "custom_anim_info", offsetof(polyobj_info, custom_anim_info)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, multi_turret_info)>(), "multi_turret_info", offsetof(polyobj_info, multi_turret_info)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, subobj_flags)>(), "subobj_flags", offsetof(polyobj_info, subobj_flags)); printf(",\n");
  details(std::type_identity<GTO(polyobj_info, tmap_override)>(), "tmap_override", offsetof(polyobj_info, tmap_override));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "shard_info_s", sizeof(shard_info_s));
  details(std::type_identity<GTO(shard_info_s, points)>(), "points", offsetof(shard_info_s, points)); printf(",\n");
  details(std::type_identity<GTO(shard_info_s, u)>(), "u", offsetof(shard_info_s, u)); printf(",\n");
  details(std::type_identity<GTO(shard_info_s, v)>(), "v", offsetof(shard_info_s, v)); printf(",\n");
  details(std::type_identity<GTO(shard_info_s, normal)>(), "normal", offsetof(shard_info_s, normal)); printf(",\n");
  details(std::type_identity<GTO(shard_info_s, tmap)>(), "tmap", offsetof(shard_info_s, tmap));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "line_info_s", sizeof(line_info_s));
  details(std::type_identity<GTO(line_info_s, end_pos)>(), "end_pos", offsetof(line_info_s, end_pos));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "blast_info_s", sizeof(blast_info_s));
  details(std::type_identity<GTO(blast_info_s, max_size)>(), "max_size", offsetof(blast_info_s, max_size)); printf(",\n");
  details(std::type_identity<GTO(blast_info_s, bm_handle)>(), "bm_handle", offsetof(blast_info_s, bm_handle));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "dying_info_s", sizeof(dying_info_s));
  details(std::type_identity<GTO(dying_info_s, death_flags)>(), "death_flags", offsetof(dying_info_s, death_flags)); printf(",\n");
  details(std::type_identity<GTO(dying_info_s, delay_time)>(), "delay_time", offsetof(dying_info_s, delay_time)); printf(",\n");
  details(std::type_identity<GTO(dying_info_s, killer_playernum)>(), "killer_playernum", offsetof(dying_info_s, killer_playernum)); printf(",\n");
  details(std::type_identity<GTO(dying_info_s, last_spark_time)>(), "last_spark_time", offsetof(dying_info_s, last_spark_time)); printf(",\n");
  details(std::type_identity<GTO(dying_info_s, last_fireball_time)>(), "last_fireball_time", offsetof(dying_info_s, last_fireball_time)); printf(",\n");
  details(std::type_identity<GTO(dying_info_s, last_smoke_time)>(), "last_smoke_time", offsetof(dying_info_s, last_smoke_time));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "debris_info_s", sizeof(debris_info_s));
  details(std::type_identity<GTO(debris_info_s, death_flags)>(), "death_flags", offsetof(debris_info_s, death_flags)); printf(",\n");
  details(std::type_identity<GTO(debris_info_s, last_smoke_time)>(), "last_smoke_time", offsetof(debris_info_s, last_smoke_time));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "laser_info_s", sizeof(laser_info_s));
  details(std::type_identity<GTO(laser_info_s, parent_type)>(), "parent_type", offsetof(laser_info_s, parent_type)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, src_gun_num)>(), "src_gun_num", offsetof(laser_info_s, src_gun_num)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, last_hit_handle)>(), "last_hit_handle", offsetof(laser_info_s, last_hit_handle)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, track_handle)>(), "track_handle", offsetof(laser_info_s, track_handle)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, last_track_time)>(), "last_track_time", offsetof(laser_info_s, last_track_time)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, hit_status)>(), "hit_status", offsetof(laser_info_s, hit_status)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, hit_pnt)>(), "hit_pnt", offsetof(laser_info_s, hit_pnt)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, hit_wall_pnt)>(), "hit_wall_pnt", offsetof(laser_info_s, hit_wall_pnt)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, hit_wall_normal)>(), "hit_wall_normal", offsetof(laser_info_s, hit_wall_normal)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, hit_room)>(), "hit_room", offsetof(laser_info_s, hit_room)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, hit_pnt_room)>(), "hit_pnt_room", offsetof(laser_info_s, hit_pnt_room)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, hit_face)>(), "hit_face", offsetof(laser_info_s, hit_face)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, multiplier)>(), "multiplier", offsetof(laser_info_s, multiplier)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, thrust_left)>(), "thrust_left", offsetof(laser_info_s, thrust_left)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, last_drop_time)>(), "last_drop_time", offsetof(laser_info_s, last_drop_time)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, last_smoke_pos)>(), "last_smoke_pos", offsetof(laser_info_s, last_smoke_pos)); printf(",\n");
  details(std::type_identity<GTO(laser_info_s, casts_light)>(), "casts_light", offsetof(laser_info_s, casts_light));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "powerup_info_s", sizeof(powerup_info_s));
  details(std::type_identity<GTO(powerup_info_s, count)>(), "count", offsetof(powerup_info_s, count));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "splinter_info_s", sizeof(splinter_info_s));
  details(std::type_identity<GTO(splinter_info_s, subobj_num)>(), "subobj_num", offsetof(splinter_info_s, subobj_num)); printf(",\n");
  details(std::type_identity<GTO(splinter_info_s, facenum)>(), "facenum", offsetof(splinter_info_s, facenum)); printf(",\n");
  details(std::type_identity<GTO(splinter_info_s, verts)>(), "verts", offsetof(splinter_info_s, verts)); printf(",\n");
  details(std::type_identity<GTO(splinter_info_s, center)>(), "center", offsetof(splinter_info_s, center));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "soundsource_info_s", sizeof(soundsource_info_s));
  details(std::type_identity<GTO(soundsource_info_s, sound_index)>(), "sound_index", offsetof(soundsource_info_s, sound_index)); printf(",\n");
  details(std::type_identity<GTO(soundsource_info_s, volume)>(), "volume", offsetof(soundsource_info_s, volume));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "physics_info", sizeof(physics_info));
  details(std::type_identity<GTO(physics_info, velocity)>(), "velocity", offsetof(physics_info, velocity)); printf(",\n");
  details(std::type_identity<GTO(physics_info, thrust)>(), "thrust", offsetof(physics_info, thrust)); printf(",\n");
  details(std::type_identity<GTO(physics_info, rotvel)>(), "rotvel", offsetof(physics_info, rotvel)); printf(",\n");
  details(std::type_identity<GTO(physics_info, turn_rate)>(), "turn_rate", offsetof(physics_info, turn_rate)); printf(",\n");
  details(std::type_identity<GTO(physics_info, rotthrust)>(), "rotthrust", offsetof(physics_info, rotthrust)); printf(",\n");
  details(std::type_identity<GTO(physics_info, turnroll)>(), "turnroll", offsetof(physics_info, turnroll)); printf(",\n");
  details(std::type_identity<GTO(physics_info, last_still_time)>(), "last_still_time", offsetof(physics_info, last_still_time)); printf(",\n");
  details(std::type_identity<GTO(physics_info, num_bounces)>(), "num_bounces", offsetof(physics_info, num_bounces)); printf(",\n");
  details(std::type_identity<GTO(physics_info, coeff_restitution)>(), "coeff_restitution", offsetof(physics_info, coeff_restitution)); printf(",\n");
  details(std::type_identity<GTO(physics_info, mass)>(), "mass", offsetof(physics_info, mass)); printf(",\n");
  details(std::type_identity<GTO(physics_info, drag)>(), "drag", offsetof(physics_info, drag)); printf(",\n");
  details(std::type_identity<GTO(physics_info, rotdrag)>(), "rotdrag", offsetof(physics_info, rotdrag)); printf(",\n");
  details(std::type_identity<GTO(physics_info, full_thrust)>(), "full_thrust", offsetof(physics_info, full_thrust)); printf(",\n");
  details(std::type_identity<GTO(physics_info, max_velocity)>(), "max_velocity", offsetof(physics_info, max_velocity)); printf(",\n");
  details(std::type_identity<GTO(physics_info, full_rotthrust)>(), "full_rotthrust", offsetof(physics_info, full_rotthrust)); printf(",\n");
  details(std::type_identity<GTO(physics_info, max_turn_rate)>(), "max_turn_rate", offsetof(physics_info, max_turn_rate)); printf(",\n");
  details(std::type_identity<GTO(physics_info, max_turnroll_rate)>(), "max_turnroll_rate", offsetof(physics_info, max_turnroll_rate)); printf(",\n");
  details(std::type_identity<GTO(physics_info, turnroll_ratio)>(), "turnroll_ratio", offsetof(physics_info, turnroll_ratio)); printf(",\n");
  details(std::type_identity<GTO(physics_info, wiggle_amplitude)>(), "wiggle_amplitude", offsetof(physics_info, wiggle_amplitude)); printf(",\n");
  details(std::type_identity<GTO(physics_info, wiggles_per_sec)>(), "wiggles_per_sec", offsetof(physics_info, wiggles_per_sec)); printf(",\n");
  details(std::type_identity<GTO(physics_info, dest_pos)>(), "dest_pos", offsetof(physics_info, dest_pos)); printf(",\n");
  details(std::type_identity<GTO(physics_info, hit_die_dot)>(), "hit_die_dot", offsetof(physics_info, hit_die_dot)); printf(",\n");
  details(std::type_identity<GTO(physics_info, stuck_room)>(), "stuck_room", offsetof(physics_info, stuck_room)); printf(",\n");
  details(std::type_identity<GTO(physics_info, max_speed_time)>(), "max_speed_time", offsetof(physics_info, max_speed_time)); printf(",\n");
  details(std::type_identity<GTO(physics_info, stuck_portal)>(), "stuck_portal", offsetof(physics_info, stuck_portal)); printf(",\n");
  details(std::type_identity<GTO(physics_info, flags)>(), "flags", offsetof(physics_info, flags));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "shockwave_info", sizeof(shockwave_info));
  details(std::type_identity<GTO(shockwave_info, damaged_list)>(), "damaged_list", offsetof(shockwave_info, damaged_list));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "object_link_info", sizeof(object_link_info));
  details(std::type_identity<GTO(object_link_info, parent_handle)>(), "parent_handle", offsetof(object_link_info, parent_handle)); printf(",\n");
  details(std::type_identity<GTO(object_link_info, sobj_index)>(), "sobj_index", offsetof(object_link_info, sobj_index)); printf(",\n");
  details(std::type_identity<GTO(object_link_info, fvec)>(), "fvec", offsetof(object_link_info, fvec)); printf(",\n");
  details(std::type_identity<GTO(object_link_info, uvec)>(), "uvec", offsetof(object_link_info, uvec)); printf(",\n");
  details(std::type_identity<GTO(object_link_info, pos)>(), "pos", offsetof(object_link_info, pos));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tOSIRISScriptNode", sizeof(tOSIRISScriptNode));
  details(std::type_identity<GTO(tOSIRISScriptNode, DLLID)>(), "DLLID", offsetof(tOSIRISScriptNode, DLLID)); printf(",\n");
  details(std::type_identity<GTO(tOSIRISScriptNode, script_id)>(), "script_id", offsetof(tOSIRISScriptNode, script_id)); printf(",\n");
  details(std::type_identity<GTO(tOSIRISScriptNode, script_instance)>(), "script_instance", offsetof(tOSIRISScriptNode, script_instance));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "tOSIRISScript", sizeof(tOSIRISScript));
  details(std::type_identity<GTO(tOSIRISScript, custom_script)>(), "custom_script", offsetof(tOSIRISScript, custom_script)); printf(",\n");
  details(std::type_identity<GTO(tOSIRISScript, mission_script)>(), "mission_script", offsetof(tOSIRISScript, mission_script)); printf(",\n");
  details(std::type_identity<GTO(tOSIRISScript, level_script)>(), "level_script", offsetof(tOSIRISScript, level_script)); printf(",\n");
  details(std::type_identity<GTO(tOSIRISScript, default_script)>(), "default_script", offsetof(tOSIRISScript, default_script));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "object", sizeof(object));
  details(std::type_identity<GTO(object, type)>(), "type", offsetof(object, type)); printf(",\n");
  details(std::type_identity<GTO(object, dummy_type)>(), "dummy_type", offsetof(object, dummy_type)); printf(",\n");
  details(std::type_identity<GTO(object, id)>(), "id", offsetof(object, id)); printf(",\n");
  details(std::type_identity<GTO(object, flags)>(), "flags", offsetof(object, flags)); printf(",\n");
  details(std::type_identity<GTO(object, name)>(), "name", offsetof(object, name)); printf(",\n");
  details(std::type_identity<GTO(object, handle)>(), "handle", offsetof(object, handle)); printf(",\n");
  details(std::type_identity<GTO(object, next)>(), "next", offsetof(object, next)); printf(",\n");
  details(std::type_identity<GTO(object, prev)>(), "prev", offsetof(object, prev)); printf(",\n");
  details(std::type_identity<GTO(object, control_type)>(), "control_type", offsetof(object, control_type)); printf(",\n");
  details(std::type_identity<GTO(object, movement_type)>(), "movement_type", offsetof(object, movement_type)); printf(",\n");
  details(std::type_identity<GTO(object, render_type)>(), "render_type", offsetof(object, render_type)); printf(",\n");
  details(std::type_identity<GTO(object, lighting_render_type)>(), "lighting_render_type", offsetof(object, lighting_render_type)); printf(",\n");
  details(std::type_identity<GTO(object, roomnum)>(), "roomnum", offsetof(object, roomnum)); printf(",\n");
  details(std::type_identity<GTO(object, pos)>(), "pos", offsetof(object, pos)); printf(",\n");
  details(std::type_identity<GTO(object, orient)>(), "orient", offsetof(object, orient)); printf(",\n");
  details(std::type_identity<GTO(object, last_pos)>(), "last_pos", offsetof(object, last_pos)); printf(",\n");
  details(std::type_identity<GTO(object, renderframe)>(), "renderframe", offsetof(object, renderframe)); printf(",\n");
  details(std::type_identity<GTO(object, wall_sphere_offset)>(), "wall_sphere_offset", offsetof(object, wall_sphere_offset)); printf(",\n");
  details(std::type_identity<GTO(object, anim_sphere_offset)>(), "anim_sphere_offset", offsetof(object, anim_sphere_offset)); printf(",\n");
  details(std::type_identity<GTO(object, size)>(), "size", offsetof(object, size)); printf(",\n");
  details(std::type_identity<GTO(object, shields)>(), "shields", offsetof(object, shields)); printf(",\n");
  details(std::type_identity<GTO(object, contains_type)>(), "contains_type", offsetof(object, contains_type)); printf(",\n");
  details(std::type_identity<GTO(object, contains_id)>(), "contains_id", offsetof(object, contains_id)); printf(",\n");
  details(std::type_identity<GTO(object, contains_count)>(), "contains_count", offsetof(object, contains_count)); printf(",\n");
  details(std::type_identity<GTO(object, pad3)>(), "pad3", offsetof(object, pad3)); printf(",\n");
  details(std::type_identity<GTO(object, creation_time)>(), "creation_time", offsetof(object, creation_time)); printf(",\n");
  details(std::type_identity<GTO(object, lifeleft)>(), "lifeleft", offsetof(object, lifeleft)); printf(",\n");
  details(std::type_identity<GTO(object, lifetime)>(), "lifetime", offsetof(object, lifetime)); printf(",\n");
  details(std::type_identity<GTO(object, parent_handle)>(), "parent_handle", offsetof(object, parent_handle)); printf(",\n");
  details(std::type_identity<GTO(object, attach_ultimate_handle)>(), "attach_ultimate_handle", offsetof(object, attach_ultimate_handle)); printf(",\n");
  details(std::type_identity<GTO(object, attach_parent_handle)>(), "attach_parent_handle", offsetof(object, attach_parent_handle)); printf(",\n");
  details(std::type_identity<GTO(object, attach_children)>(), "attach_children", offsetof(object, attach_children)); printf(",\n");
  details(std::type_identity<GTO(object, weapon_fire_flags)>(), "weapon_fire_flags", offsetof(object, weapon_fire_flags)); printf(",\n");
  details(std::type_identity<GTO(object, attach_type)>(), "attach_type", offsetof(object, attach_type)); printf(",\n");
  details(std::type_identity<GTO(object, lowest_attached_vis)>(), "lowest_attached_vis", offsetof(object, lowest_attached_vis)); printf(",\n");
  details(std::type_identity<GTO(object, attach_dist)>(), "attach_dist", offsetof(object, attach_dist)); printf(",\n");
  details(std::type_identity<GTO(object, attach_index)>(), "attach_index", offsetof(object, attach_index)); printf(",\n");
  details(std::type_identity<GTO(object, mtype)>(), "mtype", offsetof(object, mtype)); printf(",\n");
/*
  details(std::type_identity<GTO(object, mtype.phys_info)>(), "mtype.phys_info", offsetof(object, mtype.phys_info)); printf(",\n");
  details(std::type_identity<GTO(object, mtype.shock_info)>(), "mtype.shock_info", offsetof(object, mtype.shock_info)); printf(",\n");
  details(std::type_identity<GTO(object, mtype.obj_link_info)>(), "mtype.obj_link_info", offsetof(object, mtype.obj_link_info)); printf(",\n");
*/
  details(std::type_identity<GTO(object, min_xyz)>(), "min_xyz", offsetof(object, min_xyz)); printf(",\n");
  details(std::type_identity<GTO(object, max_xyz)>(), "max_xyz", offsetof(object, max_xyz)); printf(",\n");
  details(std::type_identity<GTO(object, dynamic_wb)>(), "dynamic_wb", offsetof(object, dynamic_wb)); printf(",\n");
  details(std::type_identity<GTO(object, impact_size)>(), "impact_size", offsetof(object, impact_size)); printf(",\n");
  details(std::type_identity<GTO(object, impact_time)>(), "impact_time", offsetof(object, impact_time)); printf(",\n");
  details(std::type_identity<GTO(object, impact_player_damage)>(), "impact_player_damage", offsetof(object, impact_player_damage)); printf(",\n");
  details(std::type_identity<GTO(object, impact_generic_damage)>(), "impact_generic_damage", offsetof(object, impact_generic_damage)); printf(",\n");
  details(std::type_identity<GTO(object, impact_force)>(), "impact_force", offsetof(object, impact_force)); printf(",\n");
  details(std::type_identity<GTO(object, change_flags)>(), "change_flags", offsetof(object, change_flags)); printf(",\n");
  details(std::type_identity<GTO(object, generic_nonvis_flags)>(), "generic_nonvis_flags", offsetof(object, generic_nonvis_flags)); printf(",\n");
  details(std::type_identity<GTO(object, generic_sent_nonvis)>(), "generic_sent_nonvis", offsetof(object, generic_sent_nonvis)); printf(",\n");
  details(std::type_identity<GTO(object, lm_object)>(), "lm_object", offsetof(object, lm_object)); printf(",\n");
  details(std::type_identity<GTO(object, ctype)>(), "ctype", offsetof(object, ctype)); printf(",\n");
/*
  details(std::type_identity<GTO(object, ctype.laser_info)>(), "ctype.laser_info", offsetof(object, ctype.laser_info)); printf(",\n");
  details(std::type_identity<GTO(object, ctype.powerup_info)>(), "ctype.powerup_info", offsetof(object, ctype.powerup_info)); printf(",\n");
  details(std::type_identity<GTO(object, ctype.splinter_info)>(), "ctype.splinter_info", offsetof(object, ctype.splinter_info)); printf(",\n");
  details(std::type_identity<GTO(object, ctype.blast_info)>(), "ctype.blast_info", offsetof(object, ctype.blast_info)); printf(",\n");
  details(std::type_identity<GTO(object, ctype.dying_info)>(), "ctype.dying_info", offsetof(object, ctype.dying_info)); printf(",\n");
  details(std::type_identity<GTO(object, ctype.debris_info)>(), "ctype.debris_info", offsetof(object, ctype.debris_info)); printf(",\n");
  details(std::type_identity<GTO(object, ctype.soundsource_info)>(), "ctype.soundsource_info", offsetof(object, ctype.soundsource_info)); printf(",\n");
*/
  details(std::type_identity<GTO(object, ai_info)>(), "ai_info", offsetof(object, ai_info)); printf(",\n");
  details(std::type_identity<GTO(object, rtype)>(), "rtype", offsetof(object, rtype)); printf(",\n");
/*
  details(std::type_identity<GTO(object, rtype.pobj_info)>(), "rtype.pobj_info", offsetof(object, rtype.pobj_info)); printf(",\n");
  details(std::type_identity<GTO(object, rtype.shard_info)>(), "rtype.shard_info", offsetof(object, rtype.shard_info)); printf(",\n");
  details(std::type_identity<GTO(object, rtype.sphere_color)>(), "rtype.sphere_color", offsetof(object, rtype.sphere_color)); printf(",\n");
*/
  details(std::type_identity<GTO(object, effect_info)>(), "effect_info", offsetof(object, effect_info)); printf(",\n");
  details(std::type_identity<GTO(object, lighting_info)>(), "lighting_info", offsetof(object, lighting_info)); printf(",\n");
  details(std::type_identity<GTO(object, position_counter)>(), "position_counter", offsetof(object, position_counter)); printf(",\n");
  details(std::type_identity<GTO(object, osiris_script)>(), "osiris_script", offsetof(object, osiris_script)); printf(",\n");
  details(std::type_identity<GTO(object, custom_default_script_name)>(), "custom_default_script_name", offsetof(object, custom_default_script_name)); printf(",\n");
  details(std::type_identity<GTO(object, custom_default_module_name)>(), "custom_default_module_name", offsetof(object, custom_default_module_name));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "w_bank", sizeof(w_bank));
  details(std::type_identity<GTO(w_bank, parent)>(), "parent", offsetof(w_bank, parent)); printf(",\n");
  details(std::type_identity<GTO(w_bank, pnt)>(), "pnt", offsetof(w_bank, pnt)); printf(",\n");
  details(std::type_identity<GTO(w_bank, norm)>(), "norm", offsetof(w_bank, norm));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "a_bank", sizeof(a_bank));
  details(std::type_identity<GTO(a_bank, parent)>(), "parent", offsetof(a_bank, parent)); printf(",\n");
  details(std::type_identity<GTO(a_bank, pnt)>(), "pnt", offsetof(a_bank, pnt)); printf(",\n");
  details(std::type_identity<GTO(a_bank, norm)>(), "norm", offsetof(a_bank, norm)); printf(",\n");
  details(std::type_identity<GTO(a_bank, uvec)>(), "uvec", offsetof(a_bank, uvec)); printf(",\n");
  details(std::type_identity<GTO(a_bank, f_uvec)>(), "f_uvec", offsetof(a_bank, f_uvec));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "lightmap_object_face", sizeof(lightmap_object_face));
  details(std::type_identity<GTO(lightmap_object_face, num_verts)>(), "num_verts", offsetof(lightmap_object_face, num_verts)); printf(",\n");
  details(std::type_identity<GTO(lightmap_object_face, lmi_handle)>(), "lmi_handle", offsetof(lightmap_object_face, lmi_handle)); printf(",\n");
  details(std::type_identity<GTO(lightmap_object_face, rvec)>(), "rvec", offsetof(lightmap_object_face, rvec)); printf(",\n");
  details(std::type_identity<GTO(lightmap_object_face, uvec)>(), "uvec", offsetof(lightmap_object_face, uvec)); printf(",\n");
  details(std::type_identity<GTO(lightmap_object_face, u2)>(), "u2", offsetof(lightmap_object_face, u2)); printf(",\n");
  details(std::type_identity<GTO(lightmap_object_face, v2)>(), "v2", offsetof(lightmap_object_face, v2));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "lightmap_object", sizeof(lightmap_object));
  details(std::type_identity<GTO(lightmap_object, num_models)>(), "num_models", offsetof(lightmap_object, num_models)); printf(",\n");
  details(std::type_identity<GTO(lightmap_object, num_faces)>(), "num_faces", offsetof(lightmap_object, num_faces)); printf(",\n");
  details(std::type_identity<GTO(lightmap_object, lightmap_faces)>(), "lightmap_faces", offsetof(lightmap_object, lightmap_faces)); printf(",\n");
  details(std::type_identity<GTO(lightmap_object, used)>(), "used", offsetof(lightmap_object, used));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "polyface", sizeof(polyface));
  details(std::type_identity<GTO(polyface, nverts)>(), "nverts", offsetof(polyface, nverts)); printf(",\n");
  details(std::type_identity<GTO(polyface, vertnums)>(), "vertnums", offsetof(polyface, vertnums)); printf(",\n");
  details(std::type_identity<GTO(polyface, u)>(), "u", offsetof(polyface, u)); printf(",\n");
  details(std::type_identity<GTO(polyface, v)>(), "v", offsetof(polyface, v)); printf(",\n");
  details(std::type_identity<GTO(polyface, color)>(), "color", offsetof(polyface, color)); printf(",\n");
  details(std::type_identity<GTO(polyface, texnum)>(), "texnum", offsetof(polyface, texnum)); printf(",\n");
  details(std::type_identity<GTO(polyface, normal)>(), "normal", offsetof(polyface, normal));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "glowinfo", sizeof(glowinfo));
  details(std::type_identity<GTO(glowinfo, glow_r)>(), "glow_r", offsetof(glowinfo, glow_r)); printf(",\n");
  details(std::type_identity<GTO(glowinfo, glow_g)>(), "glow_g", offsetof(glowinfo, glow_g)); printf(",\n");
  details(std::type_identity<GTO(glowinfo, glow_b)>(), "glow_b", offsetof(glowinfo, glow_b)); printf(",\n");
  details(std::type_identity<GTO(glowinfo, glow_size)>(), "glow_size", offsetof(glowinfo, glow_size)); printf(",\n");
  details(std::type_identity<GTO(glowinfo, glow_length)>(), "glow_length", offsetof(glowinfo, glow_length)); printf(",\n");
  details(std::type_identity<GTO(glowinfo, center)>(), "center", offsetof(glowinfo, center)); printf(",\n");
  details(std::type_identity<GTO(glowinfo, normal)>(), "normal", offsetof(glowinfo, normal));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "bsp_info", sizeof(bsp_info));
  details(std::type_identity<GTO(bsp_info, name)>(), "name", offsetof(bsp_info, name)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, movement_type)>(), "movement_type", offsetof(bsp_info, movement_type)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, movement_axis)>(), "movement_axis", offsetof(bsp_info, movement_axis)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, tree_offset)>(), "tree_offset", offsetof(bsp_info, tree_offset)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, data_offset)>(), "data_offset", offsetof(bsp_info, data_offset)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, offset)>(), "offset", offsetof(bsp_info, offset)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, norm)>(), "norm", offsetof(bsp_info, norm)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, d)>(), "d", offsetof(bsp_info, d)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, pnt)>(), "pnt", offsetof(bsp_info, pnt)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, geometric_center)>(), "geometric_center", offsetof(bsp_info, geometric_center)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, rad)>(), "rad", offsetof(bsp_info, rad)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, verts)>(), "verts", offsetof(bsp_info, verts)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, vertnorms)>(), "vertnorms", offsetof(bsp_info, vertnorms)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, alpha)>(), "alpha", offsetof(bsp_info, alpha)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, faces)>(), "faces", offsetof(bsp_info, faces)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, face_min)>(), "face_min", offsetof(bsp_info, face_min)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, face_max)>(), "face_max", offsetof(bsp_info, face_max)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, vertnum_memory)>(), "vertnum_memory", offsetof(bsp_info, vertnum_memory)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, u_memory)>(), "u_memory", offsetof(bsp_info, u_memory)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, v_memory)>(), "v_memory", offsetof(bsp_info, v_memory)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, nverts)>(), "nverts", offsetof(bsp_info, nverts)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, num_faces)>(), "num_faces", offsetof(bsp_info, num_faces)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, children)>(), "children", offsetof(bsp_info, children)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, parent)>(), "parent", offsetof(bsp_info, parent)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, num_children)>(), "num_children", offsetof(bsp_info, num_children)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, min)>(), "min", offsetof(bsp_info, min)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, max)>(), "max", offsetof(bsp_info, max)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, blown_off)>(), "blown_off", offsetof(bsp_info, blown_off)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, angs)>(), "angs", offsetof(bsp_info, angs)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, mod_matrix)>(), "mod_matrix", offsetof(bsp_info, mod_matrix)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, mod_pos)>(), "mod_pos", offsetof(bsp_info, mod_pos)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, keyframe_axis)>(), "keyframe_axis", offsetof(bsp_info, keyframe_axis)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, keyframe_angles)>(), "keyframe_angles", offsetof(bsp_info, keyframe_angles)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, keyframe_pos)>(), "keyframe_pos", offsetof(bsp_info, keyframe_pos)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, keyframe_matrix)>(), "keyframe_matrix", offsetof(bsp_info, keyframe_matrix)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, tick_pos_remap)>(), "tick_pos_remap", offsetof(bsp_info, tick_pos_remap)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, tick_ang_remap)>(), "tick_ang_remap", offsetof(bsp_info, tick_ang_remap)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, rot_start_time)>(), "rot_start_time", offsetof(bsp_info, rot_start_time)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, pos_start_time)>(), "pos_start_time", offsetof(bsp_info, pos_start_time)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, num_key_angles)>(), "num_key_angles", offsetof(bsp_info, num_key_angles)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, num_key_pos)>(), "num_key_pos", offsetof(bsp_info, num_key_pos)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, flags)>(), "flags", offsetof(bsp_info, flags)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, rot_track_min)>(), "rot_track_min", offsetof(bsp_info, rot_track_min)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, rot_track_max)>(), "rot_track_max", offsetof(bsp_info, rot_track_max)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, pos_track_min)>(), "pos_track_min", offsetof(bsp_info, pos_track_min)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, pos_track_max)>(), "pos_track_max", offsetof(bsp_info, pos_track_max)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, rps)>(), "rps", offsetof(bsp_info, rps)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, fov)>(), "fov", offsetof(bsp_info, fov)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, think_interval)>(), "think_interval", offsetof(bsp_info, think_interval)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, normalized_angle)>(), "normalized_angle", offsetof(bsp_info, normalized_angle)); printf(",\n");
  details(std::type_identity<GTO(bsp_info, glow_info)>(), "glow_info", offsetof(bsp_info, glow_info));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "poly_model", sizeof(poly_model));
  details(std::type_identity<GTO(poly_model, used)>(), "used", offsetof(poly_model, used)); printf(",\n");
  details(std::type_identity<GTO(poly_model, flags)>(), "flags", offsetof(poly_model, flags)); printf(",\n");
  details(std::type_identity<GTO(poly_model, new_style)>(), "new_style", offsetof(poly_model, new_style)); printf(",\n");
  details(std::type_identity<GTO(poly_model, id)>(), "id", offsetof(poly_model, id)); printf(",\n");
  details(std::type_identity<GTO(poly_model, version)>(), "version", offsetof(poly_model, version)); printf(",\n");
  details(std::type_identity<GTO(poly_model, name)>(), "name", offsetof(poly_model, name)); printf(",\n");
  details(std::type_identity<GTO(poly_model, n_models)>(), "n_models", offsetof(poly_model, n_models)); printf(",\n");
  details(std::type_identity<GTO(poly_model, model_data_size)>(), "model_data_size", offsetof(poly_model, model_data_size)); printf(",\n");
  details(std::type_identity<GTO(poly_model, model_data)>(), "model_data", offsetof(poly_model, model_data)); printf(",\n");
  details(std::type_identity<GTO(poly_model, mins)>(), "mins", offsetof(poly_model, mins)); printf(",\n");
  details(std::type_identity<GTO(poly_model, maxs)>(), "maxs", offsetof(poly_model, maxs)); printf(",\n");
  details(std::type_identity<GTO(poly_model, view_pos)>(), "view_pos", offsetof(poly_model, view_pos)); printf(",\n");
  details(std::type_identity<GTO(poly_model, wall_size)>(), "wall_size", offsetof(poly_model, wall_size)); printf(",\n");
  details(std::type_identity<GTO(poly_model, wall_size_offset)>(), "wall_size_offset", offsetof(poly_model, wall_size_offset)); printf(",\n");
  details(std::type_identity<GTO(poly_model, anim_size)>(), "anim_size", offsetof(poly_model, anim_size)); printf(",\n");
  details(std::type_identity<GTO(poly_model, anim_size_offset)>(), "anim_size_offset", offsetof(poly_model, anim_size_offset)); printf(",\n");
  details(std::type_identity<GTO(poly_model, rad)>(), "rad", offsetof(poly_model, rad)); printf(",\n");
  details(std::type_identity<GTO(poly_model, n_textures)>(), "n_textures", offsetof(poly_model, n_textures)); printf(",\n");
  details(std::type_identity<GTO(poly_model, textures)>(), "textures", offsetof(poly_model, textures)); printf(",\n");
  details(std::type_identity<GTO(poly_model, submodel)>(), "submodel", offsetof(poly_model, submodel)); printf(",\n");
  details(std::type_identity<GTO(poly_model, num_key_angles)>(), "num_key_angles", offsetof(poly_model, num_key_angles)); printf(",\n");
  details(std::type_identity<GTO(poly_model, num_key_pos)>(), "num_key_pos", offsetof(poly_model, num_key_pos)); printf(",\n");
  details(std::type_identity<GTO(poly_model, max_keys)>(), "max_keys", offsetof(poly_model, max_keys)); printf(",\n");
  details(std::type_identity<GTO(poly_model, frame_min)>(), "frame_min", offsetof(poly_model, frame_min)); printf(",\n");
  details(std::type_identity<GTO(poly_model, frame_max)>(), "frame_max", offsetof(poly_model, frame_max)); printf(",\n");
  details(std::type_identity<GTO(poly_model, n_guns)>(), "n_guns", offsetof(poly_model, n_guns)); printf(",\n");
  details(std::type_identity<GTO(poly_model, gun_slots)>(), "gun_slots", offsetof(poly_model, gun_slots)); printf(",\n");
  details(std::type_identity<GTO(poly_model, n_ground)>(), "n_ground", offsetof(poly_model, n_ground)); printf(",\n");
  details(std::type_identity<GTO(poly_model, ground_slots)>(), "ground_slots", offsetof(poly_model, ground_slots)); printf(",\n");
  details(std::type_identity<GTO(poly_model, n_attach)>(), "n_attach", offsetof(poly_model, n_attach)); printf(",\n");
  details(std::type_identity<GTO(poly_model, attach_slots)>(), "attach_slots", offsetof(poly_model, attach_slots)); printf(",\n");
  details(std::type_identity<GTO(poly_model, num_wbs)>(), "num_wbs", offsetof(poly_model, num_wbs)); printf(",\n");
  details(std::type_identity<GTO(poly_model, poly_wb)>(), "poly_wb", offsetof(poly_model, poly_wb)); printf(",\n");
  details(std::type_identity<GTO(poly_model, render_order)>(), "render_order", offsetof(poly_model, render_order));
  printf("\n] }");
  printf(",");
  printf(R"("%s" : { "size" : %lu, "members" : [)", "polymodel_effect", sizeof(polymodel_effect));
  details(std::type_identity<GTO(polymodel_effect, type)>(), "type", offsetof(polymodel_effect, type)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, alpha)>(), "alpha", offsetof(polymodel_effect, alpha)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, deform_range)>(), "deform_range", offsetof(polymodel_effect, deform_range)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, r)>(), "r", offsetof(polymodel_effect, r)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, g)>(), "g", offsetof(polymodel_effect, g)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, b)>(), "b", offsetof(polymodel_effect, b)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, fog_r)>(), "fog_r", offsetof(polymodel_effect, fog_r)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, fog_g)>(), "fog_g", offsetof(polymodel_effect, fog_g)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, fog_b)>(), "fog_b", offsetof(polymodel_effect, fog_b)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, custom_texture)>(), "custom_texture", offsetof(polymodel_effect, custom_texture)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, custom_color)>(), "custom_color", offsetof(polymodel_effect, custom_color)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, spec_r)>(), "spec_r", offsetof(polymodel_effect, spec_r)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, spec_g)>(), "spec_g", offsetof(polymodel_effect, spec_g)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, spec_b)>(), "spec_b", offsetof(polymodel_effect, spec_b)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, spec_light_pos)>(), "spec_light_pos", offsetof(polymodel_effect, spec_light_pos)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, spec_scalar)>(), "spec_scalar", offsetof(polymodel_effect, spec_scalar)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, bump_light_pos)>(), "bump_light_pos", offsetof(polymodel_effect, bump_light_pos)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, bump_scalar)>(), "bump_scalar", offsetof(polymodel_effect, bump_scalar)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, fog_depth)>(), "fog_depth", offsetof(polymodel_effect, fog_depth)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, fog_eye_distance)>(), "fog_eye_distance", offsetof(polymodel_effect, fog_eye_distance)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, fog_distance)>(), "fog_distance", offsetof(polymodel_effect, fog_distance)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, fog_plane)>(), "fog_plane", offsetof(polymodel_effect, fog_plane)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, fog_portal_vert)>(), "fog_portal_vert", offsetof(polymodel_effect, fog_portal_vert)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, fog_plane_check)>(), "fog_plane_check", offsetof(polymodel_effect, fog_plane_check)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, glow_length_scalar)>(), "glow_length_scalar", offsetof(polymodel_effect, glow_length_scalar)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, glow_size_scalar)>(), "glow_size_scalar", offsetof(polymodel_effect, glow_size_scalar)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, glow_r)>(), "glow_r", offsetof(polymodel_effect, glow_r)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, glow_g)>(), "glow_g", offsetof(polymodel_effect, glow_g)); printf(",\n");
  details(std::type_identity<GTO(polymodel_effect, glow_b)>(), "glow_b", offsetof(polymodel_effect, glow_b));
  printf("\n] }");

  printf("\n] }");

  printf("\n\n=== END OF STRUCT DUMP ===\n");

  exit(0);
}
